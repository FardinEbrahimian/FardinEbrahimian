/*کد نهایی با امکان سوییچ بین API شبیه سازی شده و داده محلی/غیرفعال سازی*/
document.addEventListener("DOMContentLoaded", () => {

  // --- Configuration Flag: Set to true to use simulated API, false to use local data and disable elements ---
  const useSimulatedApi = true; // <<--- Change this to false to use local data and disable elements


  const productListEl = document.getElementById("product-list");
  const loadingProductsEl = document.getElementById("loading-products");
  const orderTotalPriceEl = document.getElementById("order-total-price");
  const orderDiscountEl = document.getElementById("order-discount");
  const orderFinalPriceEl = document.getElementById("order-final-price");
  const deliveryDaysCardEl = document.getElementById("delivery-days-card");
  const deliveryDaysContainerEl = document.getElementById(
    "delivery-days-container"
  );
  const loadingDeliveryDaysEl = document.getElementById(
    "loading-delivery-days"
  );
  const noProductMessageEl = document.getElementById("no-product-message");
  const payButton = document.getElementById("pay-button");
  const productCardBody = document.querySelector(".col-md-9 .card-body");

  // --- Get references to elements potentially disabled ---
  const paymentOptionsContainer = document.getElementById("payment-options-container");
  const discountCodeInputEl = document.getElementById("discount-code-input");
  const shippingTypeCardEl = document.getElementById("shipping-type-card");


  // --- Local Data (used when useSimulatedApi is false) ---
  const localProductsData = [
      {
          id: 1,
          name: "اسپرسو ساز فیلیپس اتوماتیک سایکو",
          description: "گارانتی اصالت و سلامت فیزیکی کالا",
          price: 17800000,
          image: "./images/و-قیمت-اسپرسو-ساز-فیلیپس-اتوماتیک-سایکو-مدل-Saeco-SM878500-Xelsis-Deluxe-3.webp",
      },
      {
          id: 2,
          name: "محصول نمونه دیگر",
          description: "توضیحات محصول دوم برای تست لیست",
          price: 5000000,
          image: "https://via.placeholder.com/100",
      },
      {
          id: 3,
          name: "محصول سوم تستی",
          description: "توضیحات کوتاه محصول سوم",
          price: 2500000,
          image: "https://via.placeholder.com/100/FF0000",
      },
  ];
  // Define local discount codes if needed for local validation (though in non-API mode, discount input is disabled)
  const localDiscountCodes = [
      { code: 'SALE10', amount: 500000 },
      { code: 'ZARISFREE', amount: 19000 }
  ];
  // Define local delivery days if needed for local rendering (though in non-API mode, delivery card is hidden)
  const localDeliveryDays = [
      { dayOfWeek: "شنبه", date: "۷ بهمن" },
      { dayOfWeek: "یکشنبه", date: "۸ بهمن" },
      { dayOfWeek: "دوشنبه", date: "۹ بهمن" }
  ];


  // --- New variable to store the applied discount amount ---
  let appliedDiscount = 0;


  // --- Helper function to convert Persian digits to ASCII digits ---
  const persianToAsciiDigits = (text) => {
    const persianDigits = ["۰", "۱", "۲", "۳", "۴", "۵", "۶", "۷", "۸", "۹"];
    const asciiDigits = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"];
    let result = "";
    if (text === null || text === undefined) {
      return ""; // Handle null or undefined input
    }
    text = String(text); // Ensure input is treated as a string

    for (let i = 0; i < text.length; i++) {
      const char = text[i];
      const persianIndex = persianDigits.indexOf(char);
      if (persianIndex > -1) {
        result += asciiDigits[persianIndex];
      } else {
        // Keep characters that are not Persian digits (e.g., ASCII digits, commas, etc.)
        result += char;
      }
    }
    return result;
  };
  // --- End Helper function ---


  // --- Simulated API Calls (Only used when useSimulatedApi is true) ---

  async function fetchProducts() {
    console.log("-> Fetching products...");
    return new Promise((resolve) => {
      setTimeout(() => {
        const data = localProductsData; // In simulated mode, just return local data
        // const data = []; // Uncomment to simulate no products fetched via API
        console.log("<- Fetching products resolved with data:", data);
        resolve(data);
      }, 700);
    });
  }

  async function fetchDiscountCodes() {
    console.log("-> Fetching discount codes...");
    return new Promise((resolve) => {
      setTimeout(() => {
        const data = localDiscountCodes; // In simulated mode, just return local codes
        console.log("<- Fetching discount codes resolved with data:", data);
        resolve(data);
      }, 400);
    });
  }

  async function fetchDeliveryDays() {
    console.log("-> Fetching delivery days...");
    return new Promise((resolve) => {
      setTimeout(() => {
         const data = localDeliveryDays; // In simulated mode, just return local days
         // const data = []; // Uncomment to simulate no delivery days fetched via API
        console.log("<- Fetching delivery days resolved with data:", data);
        resolve(data);
      }, 500);
    });
  }

  // --- Rendering Functions ---
  function renderProducts(productsToRender) {
    console.log("-> Entering renderProducts");
    const existingHeader = productCardBody.querySelector(
      ".table-container > .d-flex.justify-content-between.border-bottom"
    );
    if (existingHeader) {
      console.warn(
        "Static product header found in HTML. It should be removed."
      );
      existingHeader.remove();
    }

    productListEl.innerHTML = "";
    loadingProductsEl.style.display = "none";

    if (productsToRender && productsToRender.length > 0) {
      productsToRender.forEach((product) => {
        const productHtml = `
            <div class="product-item card mb-2" data-product-id="${product.id}">
              <div class="card-body d-flex flex-wrap align-items-center p-3">
              <button type="button" class="btn-close ms-2 remove-product-btn col-md-1 col-sm-12" aria-label="حذف محصول" data-product-id="${
                product.id
              }"></button>
                <div class="d-flex align-items-center col-md-7  col-sm-12">
                   <img src="${
                     product.image
                   }" alt="تصویر محصول" width="100" height="100" class="mx-2 rounded">
                   <div>
                      <div class="title fw-bold">${product.name}</div>
                      <div class="description text-muted small">${
                        product.description
                      }</div>
                   </div>
                </div>
                <div class="d-flex flex-column align-items-start mx-2 col-md-2  col-sm-12">
                  <span class="product-price fw-bold">${new Intl.NumberFormat(
                    "fa-IR"
                  ).format(product.price)} تومان</span>
                </div>
                <div class="d-flex align-items-center mt-2 product-quantity-controls col-md-2  col-sm-12">
                <button class="bg-transparent border-light-subtle  rounded-circle px-1 py-1 fw-bold d-flex align-items-center justify-content-center plusBtn">
                    <img src="./images/plus-svgrepo-com.svg" alt="" width="15" height="15">
                </button>
                <div class="d-inline mx-2"><span class="product-quantity">1</span></div> <span class="ms-2">مورد</span>
                <button class="bg-transparent border-light-subtle rounded-circle px-1 py-1 fw-bold d-flex align-items-center justify-content-center minusBtn">
                    <img src="./images/minus-svgrepo-com.svg" alt="" width="15" height="15">
                </button>
                </div>

              </div>
            </div>
          `;
        productListEl.innerHTML += productHtml;
      });

      addQuantityControlListeners();
      addCloseButtonListeners();
      enableOrderControls();

    } else {
      productListEl.innerHTML =
        "<div class='text-center py-5'>محصولی برای نمایش وجود ندارد.</div>";
      disableOrderControls();
    }
    updatePrices();
    console.log("<- Exiting renderProducts");
  }


  function renderDeliveryDays(daysToRender) {
     console.log("-> Entering renderDeliveryDays");
     deliveryDaysContainerEl.innerHTML = "";
     loadingDeliveryDaysEl.style.display = "none";


    if (daysToRender && daysToRender.length > 0) {
      const daysHtml = daysToRender
        .map(
          (day) => `
          <button class="delivery-day my-2 bg-transparent border border-dark-subtle rounded-2 p-3">
            ${day.dayOfWeek} <br> ${day.date}
          </button>
        `
        )
        .join("");
      deliveryDaysContainerEl.innerHTML = daysHtml;
       addDeliveryDayEventListeners();
    } else {
      deliveryDaysContainerEl.innerHTML =
        "<div class='text-center py-3'>روز تحویلی در دسترس نیست.</div>";
    }
     console.log("<- Exiting renderDeliveryDays");
  }

  // --- Update Order Details and Payment ---

  function updatePrices() {
    console.log("-> Entering updatePrices");
    const productItems = productListEl.querySelectorAll(".product-item");
    let totalItemsCount = 0;
    let calculatedTotalPrice = 0;

    productItems.forEach((item) => {
      const quantitySpan = item.querySelector(".product-quantity");
      const priceSpan = item.querySelector(".product-price");

      if (quantitySpan && priceSpan) {
        const quantity = parseInt(quantitySpan.textContent, 10);

        const priceText = priceSpan.textContent;
        const textWithAsciiDigits = persianToAsciiDigits(priceText);
        const cleanedPriceText = textWithAsciiDigits.replace(/\D/g, "");
        const price = parseInt(cleanedPriceText, 10);

        if (!isNaN(quantity) && !isNaN(price)) {
          totalItemsCount += quantity;
          calculatedTotalPrice += price * quantity;
          console.log(
            `Item ID: ${
              item.dataset.productId || "N/A"
            }, Quantity: ${quantity}, Price: ${price}, Item Total: ${
              price * quantity
            }`
          );
        } else {
          console.warn(
            `Could not parse quantity or price for item ID: ${
              item.dataset.productId || "N/A"
            }. Quantity text: "${quantitySpan.textContent}", Price text: "${
              priceSpan.textContent
            }". Cleaned price text: "${cleanedPriceText}". Parsed Price is NaN: ${isNaN(
              price
            )}`
          );
        }
      } else {
        console.warn(
          `Quantity or price span not found for item ID: ${
            item.dataset.productId || "N/A"
          }`
        );
      }
    });

    console.log(
      "Total Calculated Price (before discount):",
      calculatedTotalPrice
    );
    console.log("Applied Discount:", appliedDiscount);

    if (orderTotalPriceEl) {
      orderTotalPriceEl.textContent =
        new Intl.NumberFormat("fa-IR").format(calculatedTotalPrice) + " تومان";
    } else {
      console.error("Element with id 'order-total-price' not found!");
    }

    if (orderDiscountEl) {
      orderDiscountEl.textContent =
        new Intl.NumberFormat("fa-IR").format(appliedDiscount) + " تومان";
    } else {
      console.error("Element with id 'order-discount' not found!");
    }

    let finalPrice = calculatedTotalPrice - appliedDiscount;
    if (finalPrice < 0) {
        finalPrice = 0;
    }

    if (orderFinalPriceEl) {
      orderFinalPriceEl.textContent = new Intl.NumberFormat("fa-IR").format(
        finalPrice
      );
    } else {
      console.error("Element with id 'order-final-price' not found!");
    }

    // Control pay button state based on whether there are items and total price > 0
    // This logic applies in both API and local modes, but in local mode the button starts disabled
    if (productItems.length === 0 || calculatedTotalPrice <= 0) {
       console.log("updatePrices: Condition met for 'no product state' logic.");
       // Button is disabled either by this logic or initially in local mode
       if (payButton) {
           payButton.classList.add('disabled');
           payButton.style.pointerEvents = 'none';
            if (!useSimulatedApi) payButton.setAttribute('disabled', 'true'); // Ensure attribute in local mode
       }
    } else {
        console.log("updatePrices: Condition not met for 'no product state' logic.");
         // Button can be enabled by this logic IF we are in API mode AND it wasn't disabled by the if block above
        if (useSimulatedApi && payButton) {
             payButton.classList.remove('disabled');
             payButton.style.pointerEvents = 'auto';
             payButton.removeAttribute('disabled');
        }
         // In local mode, the button remains disabled as set in initializePage
    }
    console.log("<- Exiting updatePrices");
  }

  // --- Control Button States ---
  function enableOrderControls() {
    console.log("-> Entering enableOrderControls");
    const plusBtns = productListEl.querySelectorAll(".plusBtn");
    const minusBtns = productListEl.querySelectorAll(".minusBtn");
    plusBtns.forEach((btn) => (btn.disabled = false));
    minusBtns.forEach((btn) => (btn.disabled = false));
    const removeBtns = productListEl.querySelectorAll(".remove-product-btn");
    removeBtns.forEach(btn => btn.disabled = false);
    console.log("<- Order controls enabled.");
  }

  function disableOrderControls() {
    console.log("-> Entering disableOrderControls");
    const plusBtns = productListEl.querySelectorAll(".plusBtn");
    const minusBtns = productListEl.querySelectorAll(".minusBtn");
    plusBtns.forEach((btn) => (btn.disabled = true));
    minusBtns.forEach((btn) => (btn.disabled = true));
    const removeBtns = productListEl.querySelectorAll(".remove-product-btn");
    removeBtns.forEach(btn => btn.disabled = true);
    console.log("<- Order controls disabled.");
  }

  // --- Handle No Product State ---
  function handleNoProductState() {
    console.log("-> Entering handleNoProductState");
    appliedDiscount = 0;
    deliveryDaysCardEl.style.display = "none";
    noProductMessageEl.style.display = "block";
    loadingDeliveryDaysEl.style.display = "none";
    deliveryDaysContainerEl.innerHTML = ""; // Clear delivery days content
     if (!useSimulatedApi) { // In local mode, show a message
          deliveryDaysContainerEl.innerHTML = "<div class='text-center py-3'>اطلاعات تحویل در دسترس نیست.</div>";
     }

    updatePrices();
    disableOrderControls();
    console.log("<- Exiting handleNoProductState");
  }

  // --- Event Listeners ---

  // Payment Option Styling
  const optionItems = document.querySelectorAll(".option-item");
  optionItems.forEach((item) => {
     // Listener only active if not using simulated API (i.e., if not disabled)
     if (useSimulatedApi && !paymentOptionsContainer.classList.contains('disabled-element')) {
          item.addEventListener("click", function () {
            console.log("Payment option clicked.");
            optionItems.forEach((opt) => (opt.style.backgroundColor = ""));
            this.style.backgroundColor = "#3B82F6";
          });
     } else {
         console.log("Payment option listener not attached (disabled mode).");
         // Optionally add a passive listener or rely on CSS for disabled state
     }
  });


  // Delivery Day Styling
  function addDeliveryDayEventListeners() {
    console.log("-> Entering addDeliveryDayEventListeners");
    // Listeners only attached if delivery days are rendered (which happens in API mode if data fetched)
    const deliveryButtons = document.querySelectorAll(".delivery-day");
    deliveryButtons.forEach((button) => {
      button.addEventListener("click", () => {
        console.log("Delivery day selected.");
        deliveryButtons.forEach((btn) => {
          btn.classList.remove("bg-primary", "text-white", "border-0");
          btn.classList.add("bg-transparent", "border", "border-dark-subtle");
        });

        button.classList.remove("bg-transparent", "border-dark-subtle");
        button.classList.add("bg-primary", "text-white", "border-0");
      });
    });
    console.log("<- Delivery day listeners added.");
  }

  // Quantity Buttons Event Listeners (Attached after rendering products - remain active)
  function addQuantityControlListeners() {
    console.log("-> Entering addQuantityControlListeners");
    const plusBtns = productListEl.querySelectorAll(".plusBtn");
    const minusBtns = productListEl.querySelectorAll(".minusBtn");

    plusBtns.forEach((button) => {
      const oldListener = button.dataset.plusListener;
      if (oldListener && window[oldListener]) {
        button.removeEventListener("click", window[oldListener]);
        window[oldListener] = null;
      }

      const newListener = (event) => {
        const quantitySpan = event.target
          .closest(".product-quantity-controls")
          .querySelector(".product-quantity");
        if (!quantitySpan) return;
        let currentQuantity = parseInt(quantitySpan.textContent, 10);
        currentQuantity++;
        quantitySpan.textContent = currentQuantity;
        updatePrices();
        console.log("Plus button clicked.");
      };
      const listenerName =
        "plusListener_" + Math.random().toString(36).substr(2, 9);
      window[listenerName] = newListener;
      button.addEventListener("click", newListener);
      button.dataset.plusListener = listenerName;
    });

    minusBtns.forEach((button) => {
      const oldListener = button.dataset.minusListener;
      if (oldListener && window[oldListener]) {
        button.removeEventListener("click", window[oldListener]);
        window[oldListener] = null;
      }

      const newListener = (event) => {
        const quantitySpan = event.target
          .closest(".product-quantity-controls")
          .querySelector(".product-quantity");
        if (!quantitySpan) return;
        let currentQuantity = parseInt(quantitySpan.textContent, 10);
        if (currentQuantity > 1) {
          currentQuantity--;
          quantitySpan.textContent = currentQuantity;
          updatePrices();
          console.log("Minus button clicked.");
        }
      };
      const listenerName =
        "minusListener_" + Math.random().toString(36).substr(2, 9);
      window[listenerName] = newListener;
      button.addEventListener("click", newListener);
      button.dataset.minusListener = listenerName;
    });
    console.log("<- Quantity control listeners added.");
  }

  function addCloseButtonListeners() {
    console.log("-> Entering addCloseButtonListeners");
    const removeButtons = productListEl.querySelectorAll(".remove-product-btn");

    removeButtons.forEach((button) => {
      const oldListener = button.dataset.removeListener;
      if (oldListener && window[oldListener]) {
        button.removeEventListener("click", window[oldListener]);
        window[oldListener] = null;
      }

      const newListener = (event) => {
        const productIdToRemove = event.target.dataset.productId;
        const productItemEl = productListEl.querySelector(
          `.product-item[data-product-id="${productIdToRemove}"]`
        );

        if (productItemEl) {
          productItemEl.remove();
          console.log(`Product with ID ${productIdToRemove} removed.`);
          updatePrices();
          if (productListEl.querySelectorAll(".product-item").length === 0) {
            console.log("Last product removed. Calling handleNoProductState.");
            handleNoProductState();
          }
        }
        console.log("Remove button clicked.");
      };
      const listenerName =
        "removeListener_" + Math.random().toString(36).substr(2, 9);
      window[listenerName] = newListener;
      button.addEventListener("click", newListener);
      button.dataset.removeListener = listenerName;
    });
    console.log("<- Close button listeners added.");
  }

  // --- Discount Code Input Listener (Only active when useSimulatedApi is true) ---
  if (useSimulatedApi && discountCodeInputEl) {
      discountCodeInputEl.addEventListener('change', async (event) => {
          console.log("-> Discount code input changed (API mode).");
          const enteredCode = event.target.value.trim();
          appliedDiscount = 0; // Reset applied discount initially

          if (enteredCode) {
              try {
                  console.log("Fetching available discount codes...");
                  const availableCodes = await fetchDiscountCodes();

                  console.log(`Checking entered code "${enteredCode}" against available codes:`, availableCodes);
                  const validCode = availableCodes.find(code => code.code.toUpperCase() === enteredCode.toUpperCase());

                  if (validCode) {
                      appliedDiscount = validCode.amount;
                      console.log(`Valid discount code "${enteredCode}" applied. Discount amount: ${appliedDiscount}`);
                      // Show success message
                      // Example: document.getElementById('discount-message').textContent = 'کد تخفیف اعمال شد.';
                  } else {
                      appliedDiscount = 0;
                      console.log(`Invalid discount code entered: "${enteredCode}". No discount applied.`);
                       // Show error message
                       // Example: document.getElementById('discount-message').textContent = 'کد تخفیف نامعتبر است.';
                  }
              } catch (error) {
                   console.error("Error fetching or applying discount code:", error);
                   appliedDiscount = 0;
                   // Show fetch error message
                   // Example: document.getElementById('discount-message').textContent = 'خطا در بررسی کد تخفیف.';
              }
          } else {
               console.log("Discount code input cleared. Applied discount reset to 0.");
               appliedDiscount = 0;
               // Clear discount messages
               // Example: document.getElementById('discount-message').textContent = '';
          }

          updatePrices();
          console.log("<- Discount code input change listener finished.");
      });
       console.log("Discount code input listener added (API mode).");
  } else if (discountCodeInputEl) {
      console.log("Discount code input listener NOT added (local mode).");
      // In local mode, the input is disabled and its value is not used for discount
  } else {
      console.error("Discount code input element with id 'discount-code-input' not found!");
  }


  // --- Initial Data Load and Setup ---

  async function initializePage() {
    console.log("-> Initializing page...");

    disableOrderControls();
    appliedDiscount = 0; // Ensure discount is 0 initially
    updatePrices(); // Display initial prices (all zero)

    const staticHeader = productCardBody.querySelector(
      ".table-container > .d-flex.justify-content-between.border-bottom"
    );
    if (staticHeader) {
      console.warn(
        "Static product header found during initialization. Removing it."
      );
      staticHeader.remove();
    }


    if (useSimulatedApi) {
        console.log("Using simulated API.");

         // --- Disable elements that are only active in API mode initially (Pay button will be enabled by updatePrices if total > 0) ---
        if (paymentOptionsContainer) {
            // In API mode, payment options might be clickable. Don't add disabled-element class initially.
             // Add listener for styling here if needed, or rely on the general listener block below initializePage
        } else { console.error("Payment options container not found!"); }

        if (payButton) {
             // Pay button starts disabled, will be enabled by updatePrices if items > 0
             payButton.classList.add('disabled');
             payButton.style.pointerEvents = 'none';
             payButton.setAttribute('disabled', 'true');
             console.log("Pay button starts disabled (API mode).");
        } else { console.error("Pay button not found!"); }

         if (discountCodeInputEl) {
             // Discount input is active in API mode, don't disable initially here
             console.log("Discount code input is active (API mode).");
         } else { console.error("Discount code input element with id 'discount-code-input' not found!"); }

         if (shippingTypeCardEl) {
              // Shipping card is active in API mode, don't disable initially here
             console.log("Shipping type card is active (API mode).");
         } else { console.warn("Shipping type card (id='shipping-type-card') not found."); }


        // --- Fetch data from simulated APIs ---
        deliveryDaysCardEl.style.display = 'block';
        noProductMessageEl.style.display = 'block';
        loadingDeliveryDaysEl.style.display = 'block';

        try {
            productsData = await fetchProducts();
            console.log("Products fetched:", productsData);

            if (productsData && productsData.length > 0) {
                renderProducts(productsData);
                console.log("Products rendered.");

                 // Fetch discount codes (needed for the input listener)
                try {
                    const availableCodes = await fetchDiscountCodes();
                    console.log("Initial discount codes fetched:", availableCodes);
                    // You might want to store availableCodes if validating elsewhere, but the input listener fetches them on change.
                } catch (discountCodeError) {
                    console.error("Could not fetch initial discount codes:", discountCodeError);
                }

                try {
                    const deliveryDays = await fetchDeliveryDays();
                    renderDeliveryDays(deliveryDays);
                    loadingDeliveryDaysEl.style.display = 'none';
                    console.log("Delivery days fetched:", deliveryDays);
                } catch (deliveryError) {
                    console.error("Could not fetch delivery days:", deliveryError);
                    renderDeliveryDays([]);
                    loadingDeliveryDaysEl.style.display = 'none';
                }

                noProductMessageEl.style.display = 'none';

            } else {
                console.log("No products fetched or error occurred during fetch.");
                handleNoProductState();
                productListEl.innerHTML = "<div class='text-center py-5'>محصولی برای نمایش وجود ندارد.</div>";
            }
        } catch (error) {
            console.error("Critical error during simulated API fetch (e.g., product fetch failed):", error);
            productListEl.innerHTML = "<div class='text-center py-5 text-danger'>خطا در بارگذاری محصولات از API شبیه‌سازی شده. لطفا مجددا تلاش کنید.</div>";
            loadingProductsEl.style.display = "none";
            handleNoProductState();
        }

    } else { // Use local data and disable elements
        console.log("Using local data and disabling elements.");

        // --- Disable specific elements as requested ---
        if (paymentOptionsContainer) {
            paymentOptionsContainer.classList.add('disabled-element');
            console.log("Payment options container disabled.");
        } else { console.error("Payment options container not found!"); }

        if (payButton) {
            payButton.classList.add('disabled');
            payButton.style.pointerEvents = 'none';
            payButton.setAttribute('disabled', 'true');
            console.log("Pay button disabled.");
        } else { console.error("Pay button not found!"); }


         if (discountCodeInputEl) {
             discountCodeInputEl.classList.add('disabled-element');
             discountCodeInputEl.setAttribute('disabled', 'true');
             console.log("Discount code input disabled.");
         } else { console.error("Discount code input element with id 'discount-code-input' not found!"); }

         if (shippingTypeCardEl) {
             shippingTypeCardEl.classList.add('disabled-element');
             console.log("Shipping type card disabled.");
         } else { console.warn("Shipping type card (id='shipping-type-card') not found. Could not disable."); }


        // --- Render products from local data ---
        console.log("Rendering products from local data...");
        if (localProductsData && localProductsData.length > 0) {
            productsData = localProductsData; // Set productsData to local data
            renderProducts(productsData);
            console.log("Products rendered from local data.");
            noProductMessageEl.style.display = "none";

        } else {
            console.log("No local product data available.");
            handleNoProductState();
            productListEl.innerHTML = "<div class='text-center py-5'>محصولی برای نمایش وجود ندارد.</div>";
        }

        // --- Handle Delivery Days display in local mode ---
        deliveryDaysCardEl.style.display = "none";
        loadingDeliveryDaysEl.style.display = "none";
        deliveryDaysContainerEl.innerHTML = "<div class='text-center py-3'>اطلاعات تحویل در دسترس نیست.</div>";

         // Initial price update based on local data happens inside renderProducts
          // Discount will remain 0 as input is disabled and appliedDiscount starts at 0

    }

    console.log("<- Initializing page finished.");
}

initializePage();

// --- General Event Listeners (Attached regardless of API/Local mode, but might be affected by disabled state) ---

// Payment Option Styling (Listener still attached, but CSS/pointer-events: none handles disabled state)
const optionItemsElements = document.querySelectorAll(".option-item");
optionItemsElements.forEach((item) => {
     item.addEventListener("click", function () {
         console.log("Payment option clicked (listener attached).");
         // Styling logic applies unless disabled-element class prevents event or styling
          optionItemsElements.forEach((opt) => (opt.style.backgroundColor = ""));
          this.style.backgroundColor = "#3B82F6";
      });
});


// Delivery Day Styling (Listener attached if days are rendered in API mode, not in local mode init)
// Function addDeliveryDayEventListeners exists and is called in renderDeliveryDays if data is available
// No need for a general listener attachment here outside initializePage and renderDeliveryDays


// Quantity Buttons Event Listeners (Attached after rendering products - remain active)
// Function addQuantityControlListeners exists and is called in renderProducts


// Close Button Event Listeners (Attached after rendering products - remain active)
// Function addCloseButtonListeners exists and is called in renderProducts


});
