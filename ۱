/*کد نهایی با امکان سوییچ بین API شبیه سازی شده و داده محلی/غیرفعال سازی و حالت سبد خرید خالی*/
document.addEventListener("DOMContentLoaded", () => {

  // --- Configuration Flag: Set to true to use simulated API, false to use local data and disable elements ---
  const useSimulatedApi = true; // <<--- Change this to false to use local data and show empty cart state


  const productListEl = document.getElementById("product-list");
  const loadingProductsEl = document.getElementById("loading-products");
  const orderTotalPriceEl = document.getElementById("order-total-price");
  const orderDiscountEl = document.getElementById("order-discount");
  const orderFinalPriceEl = document.getElementById("order-final-price");
  const deliveryDaysCardEl = document.getElementById("delivery-days-card");
  const deliveryDaysContainerEl = document.getElementById(
    "delivery-days-container"
  );
  const loadingDeliveryDaysEl = document.getElementById(
    "loading-delivery-days"
  );
  const noProductMessageEl = document.getElementById("no-product-message");
  const payButton = document.getElementById("pay-button");
  const productCardBody = document.querySelector(".col-md-9 .card-body");

  // --- Get references to elements potentially disabled ---
  const paymentOptionsContainer = document.getElementById("payment-options-container");
  const discountCodeInputEl = document.getElementById("discount-code-input");
  const shippingTypeCardEl = document.getElementById("shipping-type-card");


  // --- Local Data (used when useSimulatedApi is false) ---
  // In local mode with empty cart state, localProductsData will be an empty array
  const localProductsData = []; // Start with an empty array for empty cart state


  // Define local discount codes if needed for local validation (though in non-API mode, discount input is disabled)
  const localDiscountCodes = [
      { code: 'SALE10', amount: 500000 },
      { code: 'ZARISFREE', amount: 19000 }
  ];
  // Define local delivery days if needed for local rendering (though in non-API mode, delivery card is hidden)
  const localDeliveryDays = [
      { dayOfWeek: "شنبه", date: "۷ بهمن" },
      { dayOfWeek: "یکشنبه", date: "۸ بهمن" },
      { dayOfWeek: "دوشنبه", date: "۹ بهمن" }
  ];


  // --- New variable to store the applied discount amount ---
  let appliedDiscount = 0;


  // --- Helper function to convert Persian digits to ASCII digits ---
  const persianToAsciiDigits = (text) => {
    const persianDigits = ["۰", "۱", "۲", "۳", "۴", "۵", "۶", "۷", "۸", "۹"];
    const asciiDigits = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"];
    let result = "";
    if (text === null || text === undefined) {
      return ""; // Handle null or undefined input
    }
    text = String(text); // Ensure input is treated as a string

    for (let i = 0; i < text.length; i++) {
      const char = text[i];
      const persianIndex = persianDigits.indexOf(char);
      if (persianIndex > -1) {
        result += asciiDigits[persianIndex];
      } else {
        // Keep characters that are not Persian digits (e.g., ASCII digits, commas, etc.)
        result += char;
      }
    }
    return result;
  };
  // --- End Helper function ---


  // --- Simulated API Calls (Only used when useSimulatedApi is true) ---

  async function fetchProducts() {
    console.log("-> Fetching products...");
    return new Promise((resolve) => {
      setTimeout(() => {
        // In simulated API mode, define the actual products here or fetch from a real endpoint
         const apiProductsData = [
          {
            id: 1,
            name: "اسپرسو ساز فیلیپس اتوماتیک سایکو",
            description: "گارانتی اصالت و سلامت فیزیکی کالا",
            price: 17800000,
            image: "./images/و-قیمت-اسپرسو-ساز-فیلیپس-اتوماتیک-سایکو-مدل-Saeco-SM878500-Xelsis-Deluxe-3.webp",
          },
          {
            id: 2,
            name: "محصول نمونه دیگر",
            description: "توضیحات محصول دوم برای تست لیست",
            price: 5000000,
            image: "https://via.placeholder.com/100",
          },
          {
            id: 3,
            name: "محصول سوم تستی",
            description: "توضیحات کوتاه محصول سوم",
            price: 2500000,
            image: "https://via.placeholder.com/100/FF0000",
          },
        ];
        const data = apiProductsData; // Return the actual product data
        // const data = []; // Uncomment to simulate no products fetched via API
        console.log("<- Fetching products resolved with data:", data);
        resolve(data);
      }, 700);
    });
  }

  async function fetchDiscountCodes() {
    console.log("-> Fetching discount codes...");
    return new Promise((resolve) => {
      setTimeout(() => {
        const data = localDiscountCodes; // In simulated mode, just return local codes
        console.log("<- Fetching discount codes resolved with data:", data);
        resolve(data);
      }, 400);
    });
  }

  async function fetchDeliveryDays() {
    console.log("-> Fetching delivery days...");
    return new Promise((resolve) => {
      setTimeout(() => {
         const data = localDeliveryDays; // In simulated mode, just return local days
         // const data = []; // Uncomment to simulate no delivery days fetched via API
        console.log("<- Fetching delivery days resolved with data:", data);
        resolve(data);
      }, 500);
    });
  }

  // --- Rendering Functions ---
  function renderProducts(productsToRender) {
    console.log("-> Entering renderProducts");
    const existingHeader = productCardBody.querySelector(
      ".table-container > .d-flex.justify-content-between.border-bottom"
    );
    if (existingHeader) {
      console.warn(
        "Static product header found in HTML. It should be removed."
      );
      existingHeader.remove();
    }

    productListEl.innerHTML = "";
    loadingProductsEl.style.display = "none";

    if (productsToRender && productsToRender.length > 0) {
      productsToRender.forEach((product) => {
        const productHtml = `
            <div class="product-item card mb-2" data-product-id="${product.id}">
              <div class="card-body d-flex flex-wrap align-items-center p-3">
              <button type="button" class="btn-close ms-2 remove-product-btn col-md-1 col-sm-12" aria-label="حذف محصول" data-product-id="${
                product.id
              }"></button>
                <div class="d-flex align-items-center col-md-7  col-sm-12">
                   <img src="${
                     product.image
                   }" alt="تصویر محصول" width="100" height="100" class="mx-2 rounded">
                   <div>
                      <div class="title fw-bold">${product.name}</div>
                      <div class="description text-muted small">${
                        product.description
                      }</div>
                   </div>
                </div>
                <div class="d-flex flex-column align-items-start mx-2 col-md-2  col-sm-12">
                  <span class="product-price fw-bold">${new Intl.NumberFormat(
                    "fa-IR"
                  ).format(product.price)} تومان</span>
                </div>
                <div class="d-flex align-items-center mt-2 product-quantity-controls col-md-2  col-sm-12">
                <button class="bg-transparent border-light-subtle  rounded-circle px-1 py-1 fw-bold d-flex align-items-center justify-content-center plusBtn">
                    <img src="./images/plus-svgrepo-com.svg" alt="" width="15" height="15">
                </button>
                <div class="d-inline mx-2"><span class="product-quantity">1</span></div> <span class="ms-2">مورد</span>
                <button class="bg-transparent border-light-subtle rounded-circle px-1 py-1 fw-bold d-flex align-items-center justify-content-center minusBtn">
                    <img src="./images/minus-svgrepo-com.svg" alt="" width="15" height="15">
                </button>
                </div>

              </div>
            </div>
          `;
        productListEl.innerHTML += productHtml;
      });

      addQuantityControlListeners();
      addCloseButtonListeners();
      enableOrderControls();

    } else {
       // If no products to render (empty list) -> This case is handled by handleNoProductState now
        // The content of productListEl for the empty state is set in handleNoProductState
      disableOrderControls();
    }
    updatePrices();
    console.log("<- Exiting renderProducts");
  }


  function renderDeliveryDays(daysToRender) {
     console.log("-> Entering renderDeliveryDays");
     deliveryDaysContainerEl.innerHTML = "";
     loadingDeliveryDaysEl.style.display = "none";


    if (useSimulatedApi && daysToRender && daysToRender.length > 0) { // Only render if API mode AND data exists
      const daysHtml = daysToRender
        .map(
          (day) => `
          <button class="delivery-day my-2 bg-transparent border border-dark-subtle rounded-2 p-3">
            ${day.dayOfWeek} <br> ${day.date}
          </button>
        `
        )
        .join("");
      deliveryDaysContainerEl.innerHTML = daysHtml;
       addDeliveryDayEventListeners();
    } else {
       // In local mode OR if no data in API mode, show a message
      deliveryDaysContainerEl.innerHTML =
        "<div class='text-center py-3'>اطلاعات تحویل در دسترس نیست.</div>";
    }
     console.log("<- Exiting renderDeliveryDays");
  }

  // --- Update Order Details and Payment ---

  function updatePrices() {
    console.log("-> Entering updatePrices");
    const productItems = productListEl.querySelectorAll(".product-item");
    let totalItemsCount = 0;
    let calculatedTotalPrice = 0;

    productItems.forEach((item) => {
      const quantitySpan = item.querySelector(".product-quantity");
      const priceSpan = item.querySelector(".product-price");

      if (quantitySpan && priceSpan) {
        const quantity = parseInt(quantitySpan.textContent, 10);

        const priceText = priceSpan.textContent;
        const textWithAsciiDigits = persianToAsciiDigits(priceText);
        const cleanedPriceText = textWithAsciiDigits.replace(/\D/g, "");
        const price = parseInt(cleanedPriceText, 10);

        if (!isNaN(quantity) && !isNaN(price)) {
          totalItemsCount += quantity;
          calculatedTotalPrice += price * quantity;
          console.log(
            `Item ID: ${
              item.dataset.productId || "N/A"
            }, Quantity: ${quantity}, Price: ${price}, Item Total: ${
              price * quantity
            }`
          );
        } else {
          console.warn(
            `Could not parse quantity or price for item ID: ${
              item.dataset.productId || "N/A"
            }. Quantity text: "${quantitySpan.textContent}", Price text: "${
              priceSpan.textContent
            }". Cleaned price text: "${cleanedPriceText}". Parsed Price is NaN: ${isNaN(
              price
            )}`
          );
        }
      } else {
        console.warn(
          `Quantity or price span not found for item ID: ${
            item.dataset.productId || "N/A"
          }`
        );
      }
    });

    console.log(
      "Total Calculated Price (before discount):",
      calculatedTotalPrice
    );
    console.log("Applied Discount:", appliedDiscount);

    if (orderTotalPriceEl) {
      orderTotalPriceEl.textContent =
        new Intl.NumberFormat("fa-IR").format(calculatedTotalPrice) + " تومان";
    } else {
      console.error("Element with id 'order-total-price' not found!");
    }

    if (orderDiscountEl) {
      orderDiscountEl.textContent =
        new Intl.NumberFormat("fa-IR").format(appliedDiscount) + " تومان";
    } else {
      console.error("Element with id 'order-discount' not found!");
    }

    let finalPrice = calculatedTotalPrice - appliedDiscount;
    if (finalPrice < 0) {
        finalPrice = 0;
    }

    if (orderFinalPriceEl) {
      orderFinalPriceEl.textContent = new Intl.NumberFormat("fa-IR").format(
        finalPrice
      );
    } else {
      console.error("Element with id 'order-final-price' not found!");
    }

    // Control pay button state based on whether there are items and total price > 0
    // This logic applies in both API and local modes, but disabling class is added in local mode
    if (productItems.length === 0 || calculatedTotalPrice <= 0) {
       console.log("updatePrices: Condition met for 'no product state' logic.");
       if (payButton) {
           payButton.classList.add('disabled');
           payButton.style.pointerEvents = 'none';
            if (!useSimulatedApi) payButton.setAttribute('disabled', 'true'); // Ensure attribute in local mode
       } else { console.error("Pay button not found!"); }

       // If using local mode AND condition is met, ensure payment options are disabled
       if (!useSimulatedApi && paymentOptionsContainer) {
            paymentOptionsContainer.classList.add('disabled-element');
       }

    } else {
        console.log("updatePrices: Condition not met for 'no product state' logic.");
        // If using API mode AND condition is not met, enable the button
        if (useSimulatedApi && payButton) {
             payButton.classList.remove('disabled');
             payButton.style.pointerEvents = 'auto';
             payButton.removeAttribute('disabled');
        } else if (!useSimulatedApi && payButton) {
             // In local mode, button stays disabled as set in initializePage
        } else { console.error("Pay button not found!"); }


         // If using API mode AND condition is not met, ensure payment options are NOT disabled
         if (useSimulatedApi && paymentOptionsContainer) {
              paymentOptionsContainer.classList.remove('disabled-element');
         } else if (!useSimulatedApi && paymentOptionsContainer) {
              // In local mode, payment options stay disabled as set in initializePage
         } else { console.error("Payment options container not found!"); }

    }
    console.log("<- Exiting updatePrices");
  }

  // --- Control Button States ---
  function enableOrderControls() {
    console.log("-> Entering enableOrderControls");
    const plusBtns = productListEl.querySelectorAll(".plusBtn");
    const minusBtns = productListEl.querySelectorAll(".minusBtn");
    plusBtns.forEach((btn) => (btn.disabled = false));
    minusBtns.forEach((btn) => (btn.disabled = false));
    const removeBtns = productListEl.querySelectorAll(".remove-product-btn");
    removeBtns.forEach(btn => btn.disabled = false);
    console.log("<- Order controls enabled.");
  }

  function disableOrderControls() {
    console.log("-> Entering disableOrderControls");
    const plusBtns = productListEl.querySelectorAll(".plusBtn");
    const minusBtns = productListEl.querySelectorAll(".minusBtn");
    plusBtns.forEach((btn) => (btn.disabled = true));
    minusBtns.forEach((btn) => (btn.disabled = true));
    const removeBtns = productListEl.querySelectorAll(".remove-product-btn");
    removeBtns.forEach(btn => btn.disabled = true);
    console.log("<- Order controls disabled.");
  }

  // --- Handle No Product State ---
  function handleNoProductState() {
    console.log("-> Entering handleNoProductState");
    appliedDiscount = 0; // Reset applied discount if no products

    // --- Update Product List display for empty state ---
    // Show empty cart icon and message in the product list area
    productListEl.innerHTML = `
      <div class="empty-cart-state text-center py-5 text-muted">
          <svg xmlns="http://www.w3.org/2000/svg" width="60" height="60" fill="#ced4da" viewBox="0 0 256 256">
              <path d="M96,216a12,12,0,1,1-12,12A12,12,0,0,1,96,216Zm88,12a12,12,0,1,0,12-12A12,12,0,0,0,184,228ZM230.67,80.44l-17.33,88A16,16,0,0,1,199.33,192H72a16,16,0,0,1-14-8.83L32,32H8A8,8,0,0,1,8,16H32a8,8,0,0,1,7.17,4.83L62,96H201.33l14-70A8,8,0,0,1,224,21.33h8a8,8,0,0,1,0,16H224ZM72,176H199.33a0.11,0.11,0,0,0,.09-0.07l14-88a0.13,0.13,0,0,0,0.06-0.11V96H62Z"></path>
          </svg>
          <p class="text-muted mt-3">سبد خرید شما خالی است.</p>
      </div>
    `;

    deliveryDaysCardEl.style.display = "none"; // Hide delivery days card
    noProductMessageEl.style.display = "block"; // Show the dedicated "هنوز محصولی انتخاب نشده است" div
    loadingDeliveryDaysEl.style.display = "none"; // Hide delivery loading
     // Show a message in the delivery days section
    deliveryDaysContainerEl.innerHTML = "<div class='text-center py-3'>اطلاعات تحویل در دسترس نیست.</div>";


    updatePrices(); // Ensure prices are 0 (including appliedDiscount)
    disableOrderControls(); // Disable quantity/remove buttons
    console.log("<- Exiting handleNoProductState");
  }

  // --- Event Listeners ---

  // Payment Option Styling (Listener attached regardless, but CSS/pointer-events: none handles disabled state)
  const optionItemsElements = document.querySelectorAll(".option-item");
  if (optionItemsElements.length > 0) {
      optionItemsElements.forEach((item) => {
           item.addEventListener("click", function () {
               console.log("Payment option clicked (listener attached).");
               // Styling logic applies unless disabled-element class prevents event or styling
                optionItemsElements.forEach((opt) => (opt.style.backgroundColor = ""));
                this.style.backgroundColor = "#3B82F6";
            });
      });
      console.log("Payment option listeners added.");
  } else { console.warn("No elements with class 'option-item' found to attach listeners."); }


  // Delivery Day Styling (Listener attached if days are rendered in API mode, not in local mode)
  // Function addDeliveryDayEventListeners exists and is called in renderDeliveryDays if data is available


  // Quantity Buttons Event Listeners (Attached after rendering products - remain active)
  // Function addQuantityControlListeners exists and is called in renderProducts


  // Close Button Event Listeners (Attached after rendering products - remain active)
  // Function addCloseButtonListeners exists and is called in renderProducts

  // --- Discount Code Input Listener (Only active when useSimulatedApi is true) ---
  // Listener attached regardless, but logic inside depends on useSimulatedApi
  if (discountCodeInputEl) {
      discountCodeInputEl.addEventListener('change', async (event) => {
          if (!useSimulatedApi) {
               console.log("-> Discount code input changed (local mode - ignored).");
               // In local mode, input is disabled, so this won't be easily triggered, but handle defensively
               event.target.value = ''; // Clear input in local mode if somehow changed
               appliedDiscount = 0;
               updatePrices();
               return; // Exit if in local mode
          }

          console.log("-> Discount code input changed (API mode).");
          const enteredCode = event.target.value.trim();
          appliedDiscount = 0; // Reset applied discount initially

          if (enteredCode) {
              try {
                  console.log("Fetching available discount codes...");
                  const availableCodes = await fetchDiscountCodes();

                  console.log(`Checking entered code "${enteredCode}" against available codes:`, availableCodes);
                  const validCode = availableCodes.find(code => code.code.toUpperCase() === enteredCode.toUpperCase());

                  if (validCode) {
                      appliedDiscount = validCode.amount;
                      console.log(`Valid discount code "${enteredCode}" applied. Discount amount: ${appliedDiscount}`);
                      // Show success message
                  } else {
                      appliedDiscount = 0;
                      console.log(`Invalid discount code entered: "${enteredCode}". No discount applied.`);
                       // Show error message
                  }
              } catch (error) {
                   console.error("Error fetching or applying discount code:", error);
                   appliedDiscount = 0;
                   // Show fetch error message
              }
          } else {
               console.log("Discount code input cleared. Applied discount reset to 0.");
               appliedDiscount = 0;
               // Clear discount messages
          }

          updatePrices();
          console.log("<- Discount code input change listener finished.");
      });
       console.log("Discount code input listener added.");
  } else {
      console.error("Discount code input element with id 'discount-code-input' not found!");
  }


  // --- Initial Data Load and Setup ---

  async function initializePage() {
    console.log("-> Initializing page...");

    disableOrderControls(); // Disable quantity/remove buttons initially
    appliedDiscount = 0; // Ensure discount is 0 initially

    // Clear any static header
    const staticHeader = productCardBody.querySelector(
      ".table-container > .d-flex.justify-content-between.border-bottom"
    );
    if (staticHeader) {
      console.warn(
        "Static product header found during initialization. Removing it."
      );
      staticHeader.remove();
    }


    if (useSimulatedApi) {
        console.log("Using simulated API.");

         // --- Elements active in API mode ---
        if (paymentOptionsContainer) {
             paymentOptionsContainer.classList.remove('disabled-element'); // Ensure not disabled
        } else { console.error("Payment options container not found!"); }

        if (payButton) {
             // Pay button starts disabled, will be enabled by updatePrices if items > 0
             payButton.classList.add('disabled');
             payButton.style.pointerEvents = 'none';
             payButton.setAttribute('disabled', 'true');
             console.log("Pay button starts disabled (API mode).");
        } else { console.error("Pay button not found!"); }

         if (discountCodeInputEl) {
             discountCodeInputEl.classList.remove('disabled-element'); // Ensure not disabled
             discountCodeInputEl.removeAttribute('disabled');
             discountCodeInputEl.value = ''; // Clear any previous value
             console.log("Discount code input is active (API mode).");
         } else { console.error("Discount code input element with id 'discount-code-input' not found!"); }

         if (shippingTypeCardEl) {
             shippingTypeCardEl.classList.remove('disabled-element'); // Ensure not disabled
             console.log("Shipping type card is active (API mode).");
         } else { console.warn("Shipping type card (id='shipping-type-card') not found."); }


        // --- Fetch data from simulated APIs ---
        deliveryDaysCardEl.style.display = 'block'; // Show delivery days card
        noProductMessageEl.style.display = 'block'; // Show loading message initially
        loadingDeliveryDaysEl.style.display = 'block'; // Show delivery loading

        try {
            productsData = await fetchProducts();
            console.log("Products fetched:", productsData);

            if (productsData && productsData.length > 0) {
                renderProducts(productsData);
                console.log("Products rendered.");

                 // Fetch discount codes (needed for the input listener)
                try {
                    const availableCodes = await fetchDiscountCodes();
                    console.log("Initial discount codes fetched:", availableCodes);
                } catch (discountCodeError) {
                    console.error("Could not fetch initial discount codes:", discountCodeError);
                }

                try {
                    const deliveryDays = await fetchDeliveryDays();
                    renderDeliveryDays(deliveryDays);
                    loadingDeliveryDaysEl.style.display = 'none';
                    console.log("Delivery days fetched:", deliveryDays);
                } catch (deliveryError) {
                    console.error("Could not fetch delivery days:", deliveryError);
                    renderDeliveryDays([]);
                    loadingDeliveryDaysEl.style.display = 'none';
                }

                noProductMessageEl.style.display = 'none'; // Hide no product message if products loaded
                // Initial price update and pay button state happen inside renderProducts -> updatePrices

            } else {
                console.log("No products fetched or error occurred during fetch.");
                handleNoProductState(); // Trigger no product state
                // handleNoProductState now sets productListEl content for empty state
            }
        } catch (error) {
            console.error("Critical error during simulated API fetch (e.g., product fetch failed):", error);
             // Set empty state and show error message in product list area
            productListEl.innerHTML = "<div class='text-center py-5 text-danger'>خطا در بارگذاری محصولات از API شبیه‌سازی شده. لطفا مجددا تلاش کنید.</div>";
            loadingProductsEl.style.display = "none";
            handleNoProductState(); // Trigger no product state on error (resets discount, hides delivery, etc.)
        }

    } else { // Use local data (empty cart state) and disable elements
        console.log("Using local data (empty cart state) and disabling elements.");

        // --- Disable specific elements as requested for empty/local state ---
        if (paymentOptionsContainer) {
            paymentOptionsContainer.classList.add('disabled-element');
            console.log("Payment options container disabled.");
        } else { console.error("Payment options container not found!"); }

        if (payButton) {
            payButton.classList.add('disabled');
            payButton.style.pointerEvents = 'none';
            payButton.setAttribute('disabled', 'true');
            console.log("Pay button disabled.");
        } else { console.error("Pay button not found!"); }


         if (discountCodeInputEl) {
             discountCodeInputEl.classList.add('disabled-element');
             discountCodeInputEl.setAttribute('disabled', 'true');
             discountCodeInputEl.value = ''; // Ensure input is empty
             console.log("Discount code input disabled.");
         } else { console.error("Discount code input element with id 'discount-code-input' not found!"); }

         if (shippingTypeCardEl) {
             shippingTypeCardEl.classList.add('disabled-element');
             console.log("Shipping type card disabled.");
         } else { console.warn("Shipping type card (id='shipping-type-card') not found. Could not disable."); }


        // --- Render products from local data (empty in this case) ---
        console.log("Rendering products from local data (empty).");
        productsData = localProductsData; // Set productsData to the empty local data array
        // renderProducts(productsData); // renderProducts will call handleNoProductState because productsData is empty
        // Instead of calling renderProducts which calls handleNoProductState, just call handleNoProductState directly for clarity
        handleNoProductState();


        // handleNoProductState is called by renderProducts when the list is empty.
        // It sets the productListEl content, resets discount, hides delivery, etc.
        // The disabling of elements is also handled above in this 'else' block.

    }

    updatePrices(); // Call updatePrices once at the end of initializePage in both modes
    console.log("<- Initializing page finished.");
  }

  initializePage();

  // --- General Event Listeners (Attached regardless of API/Local mode, but might be affected by disabled state) ---

  // Payment Option Styling (Listener attached regardless, but CSS/pointer-events: none handles disabled state)
  const optionItemsElements = document.querySelectorAll(".option-item"); // Removed duplicate declaration here
  if (optionItemsElements.length > 0) {
      optionItemsElements.forEach((item) => {
           item.addEventListener("click", function () {
               console.log("Payment option clicked (listener attached).");
               // Styling logic applies unless disabled-element class prevents event or styling
                optionItemsElements.forEach((opt) => (opt.style.backgroundColor = ""));
                this.style.backgroundColor = "#3B82F6";
            });
      });
      console.log("Payment option listeners added.");
  } else { console.warn("No elements with class 'option-item' found to attach listeners."); }


  // Delivery Day Styling (Listener attached if days are rendered in API mode, not in local mode)
  // Function addDeliveryDayEventListeners exists and is called in renderDeliveryDays if data is available


  // Quantity Buttons Event Listeners (Attached after rendering products - remain active)
  // Function addQuantityControlListeners exists and is called in renderProducts


  // Close Button Event Listeners (Attached after rendering products - remain active)
  // Function addCloseButtonListeners exists and is called in renderProducts

  // --- Discount Code Input Listener (Only active when useSimulatedApi is true) ---
  // Listener attached regardless, but logic inside depends on useSimulatedApi
  if (discountCodeInputEl) {
      discountCodeInputEl.addEventListener('change', async (event) => {
          if (!useSimulatedApi) {
               console.log("-> Discount code input changed (local mode - ignored).");
               event.target.value = '';
               appliedDiscount = 0;
               updatePrices();
               return;
          }

          console.log("-> Discount code input changed (API mode).");
          const enteredCode = event.target.value.trim();
          appliedDiscount = 0;

          if (enteredCode) {
              try {
                  console.log("Fetching available discount codes...");
                  const availableCodes = await fetchDiscountCodes();

                  console.log(`Checking entered code "${enteredCode}" against available codes:`, availableCodes);
                  const validCode = availableCodes.find(code => code.code.toUpperCase() === enteredCode.toUpperCase());

                  if (validCode) {
                      appliedDiscount = validCode.amount;
                      console.log(`Valid discount code "${enteredCode}" applied. Discount amount: ${appliedDiscount}`);
                  } else {
                      appliedDiscount = 0;
                      console.log(`Invalid discount code entered: "${enteredCode}". No discount applied.`);
                  }
              } catch (error) {
                   console.error("Error fetching or applying discount code:", error);
                   appliedDiscount = 0;
              }
          } else {
               console.log("Discount code input cleared. Applied discount reset to 0.");
               appliedDiscount = 0;
          }

          updatePrices();
          console.log("<- Discount code input change listener finished.");
      });
       console.log("Discount code input listener added.");
  } else {
      console.error("Discount code input element with id 'discount-code-input' not found!");
  }

}); // <-- Closing brace for DOMContentLoaded listener
