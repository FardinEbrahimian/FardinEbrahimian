/*کد ها با api شبیه سازی شده*/
document.addEventListener("DOMContentLoaded", () => {
  const productListEl = document.getElementById("product-list");
  const loadingProductsEl = document.getElementById("loading-products");
  // --- NEW: Get reference to the product error message element ---
  const productErrorMessageEl = document.getElementById("product-error-message"); // Element for fetch errors

  const orderTotalPriceEl = document.getElementById("order-total-price");
  const orderShippingCostEl = document.getElementById("order-shipping-cost");
  const orderTaxCostEl = document.getElementById("order-tax-cost");
  const orderDiscountEl = document.getElementById("order-discount");
  const orderFinalPriceEl = document کوز.getElementById("order-final-price");

  const deliveryDaysCardEl = document.getElementById("delivery-days-card");
  const deliveryDaysContainerEl = document.getElementById(
    "delivery-days-container"
  );
  const loadingDeliveryDaysEl = document.getElementById(
    "loading-delivery-days"
  );
  const noProductMessageEl = document.getElementById("no-product-message"); // This will now serve as a general error/no-product alert

  const payButton = document.getElementById("pay-button");
  const productCardBody = document.querySelector(".col-md-9 .card-body");
  const userAddressContainerEl = document.getElementById(
    "user-address-container"
  );
  const discountCodeInputEl = document.getElementById("discount-code-input");
  // --- NEW: Get reference to payment option items ---
  const paymentOptionItems = document.querySelectorAll(".option-item");


  let productsData = [];
  let appliedDiscount = 0;
  let shippingCost = 0;
  let taxCost = 0;

   // --- NEW: HTML string for the empty cart state ---
  const emptyCartHtml = `
    <div class='text-center py-5'>
      <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" fill="currentColor" class="bi bi-cart-x mb-3" viewBox="0 0 16 16">
        <path d="M7.354 5.646a.5.5 0 1 0-.708.708L7.793 7.5 6.646 8.646a.5.5 0 1 0 .708.708L8.5 8.207l1.146 1.147a.5.5 0 0 0 .708-.708L9.207 7.5l1.147-1.146a.5.5 0 0 0-.708-.708L8.5 6.793l-1.146-1.147z"/>
        <path d="M.5 1a.5.5 0 0 0 0 1h1.11l.401 1.607 1.493 4.731-1.73.484a.5.5 0 0 0-.394.598l1.5 8a.5.5 0 0 0 .9.01L7.5 14.5l.394-1.555L8.5 11.5l1.026-3.876 1.73-.484A.5.5 0 0 0 14.5 8h1a.5.5 0 0 0 .5-.5V5a.5.5 0 0 0-.5-.5h-11a.5.5 0 0 0-.468.325zM12.5 10l-.693 2.773-.343 1.365c.386.057.739.163 1.092.36V10h-1zm2 0h-1.5v2.385c.725-.156 1.4-.56 1.946-1.175zm-13-7h13l.95 4.75L13.149 8q-.086.183-.242.314c-.156.133-.34.21-.535.251L10.16 9l1.73 4.808a.5.5 0 0 0 .724.216h-.001l.313-.937A.5.5 0 0 0 14.5 13h1a.5.5 0 0 0 0-1h-1.11l-1.5-7a.5.5 0 0 0-.401-.407L2.11 3zM5.5 10a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 0 1H6a.5.5 0 0 1-.5-.5z"/>
      </svg>
      محصولی برای نمایش وجود ندارد.
    </div>
  `;
  // --- END NEW HTML string ---


  const persianToAsciiDigits = (text) => {
    const persianDigits = ["۰", "۱", "۲", "۳", "۴", "۵", "۶", "۷", "۸", "۹"];
    const asciiDigits = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"];
    let result = "";
    if (text === null || text === undefined) {
      return "";
    }
    text = String(text);

    for (let i = 0; i < text.length; i++) {
      const char = text[i];
      const persianIndex = persianDigits.indexOf(char);
      if (persianIndex > -1) {
        result += asciiDigits[persianIndex];
      } else {
        result += char;
      }
    }
    return result;
  };

  // --- Simulated API Calls (remains the same for now) ---
  async function fetchProducts() {
    console.log("-> Fetching products...");
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        const data = [
           {
            id: 1,
            name: "اسپرسو ساز فیلیپس اتوماتیک سایکو",
            description: "گارانتی اصالت و سلامت فیزیکی کالا",
            price: 17800000,
            image:
              "./images/و-قیمت-اسپرسو-ساز-فیلیپس-اتوماتیک-سایکو-مدل-Saeco-SM878500-Xelsis-Deluxe-3.webp",
          },
          {
            id: 2,
            name: "محصول نمونه دیگر",
            description: "توضیحات محصول دوم برای تست لیست",
            price: 5000000,
            image: "https://via.placeholder.com/100",
          },
        ];
         // const data = []; // Uncomment this line to simulate no products
         // reject(new Error("Failed to fetch products")); // Uncomment this line to simulate a fetch error
        console.log("<- Fetching products resolved with data:", data);
        resolve(data);
      }, 700);
    });
  }

  async function fetchDiscountCodes() {
    console.log("-> Fetching discount codes...");
    return new Promise((resolve) => {
      setTimeout(() => {
        const data = [
          { code: "SALE10", amount: 500000 },
          { code: "ZARISFREE", amount: 19000 },
        ];
        console.log("<- Fetching discount codes resolved with data:", data);
        resolve(data);
      }, 400);
    });
  }

  async function fetchDeliveryDays() {
    console.log("-> Fetching delivery days...");
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        const data = [
          { dayOfWeek: "شنبه", date: "۷ بهمن" },
          { dayOfWeek: "یکشنبه", date: "۸ بهمن" },
          { dayOfWeek: "دوشنبه", date: "۹ بهمن" },
        ];
        // const data = []; // Uncomment this line to simulate no delivery days fetched
        // reject(new Error("Failed to fetch delivery days")); // Uncomment to simulate error
        console.log("<- Fetching delivery days resolved with data:", data);
        resolve(data);
      }, 500);
    });
  }

  async function fetchUserAddress() {
      console.log("-> Fetching user address...");
      return new Promise((resolve, reject) => {
          setTimeout(() => {
              const addressData = {
                  street: "خیابان انقلاب، کوچه دانشگاه",
                  building: "پلاک ۱۲",
                  unit: "واحد ۳",
                  city: "تهران",
                  postalCode: "۱۲۳۴۵۶۷۸۹۰",
                  fullAddress: "تهران، خیابان انقلاب، کوچه دانشگاه، پلاک ۱۲، واحد ۳، کد پستی: ۱۲۳۴۵۶۷۸۹۰"
              };
              // const addressData = null; // Uncomment to simulate no address found
              // reject(new Error("Failed to fetch address")); // Uncomment to simulate error
              console.log("<- Fetching user address resolved with data:", addressData);
              resolve(addressData);
          }, 600);
      });
  }

  async function fetchShippingCost() {
      console.log("-> Fetching shipping cost...");
      return new Promise((resolve, reject) => {
          setTimeout(() => {
              const cost = 19000;
              // reject(new Error("Failed to fetch shipping cost")); // Uncomment to simulate error
              console.log("<- Fetching shipping cost resolved with data:", cost);
              resolve(cost);
          }, 450);
      });
  }

   async function fetchTaxCost() {
      console.log("-> Fetching tax cost...");
       return new Promise((resolve, reject) => {
          setTimeout(() => {
               const cost = 50000;
              // reject(new Error("Failed to fetch tax cost")); // Uncomment to simulate error
               console.log("<- Fetching tax cost resolved with data:", cost);
              resolve(cost);
          }, 350);
       });
   }
  // --- End Simulated API Calls ---


  // --- Rendering Functions ---

  function renderProducts(productsToRender) {
    console.log("-> Entering renderProducts");
    loadingProductsEl.style.display = "none"; // Hide product loading
    productErrorMessageEl.style.display = "none"; // Hide fetch error message

    if (productsToRender && productsToRender.length > 0) {
      productListEl.innerHTML = ""; // Clear current content (including empty state icon/text if present)
      productsToRender.forEach((product) => {
        const productHtml = `
            <div class="product-item card mb-2" data-product-id="${product.id}">
              <div class="card-body d-flex flex-wrap align-items-center p-3">
              <button type="button" class="btn-close ms-2 remove-product-btn col-md-1 col-sm-12" aria-label="حذف محصول" data-product-id="${
                product.id
              }"></button>
                <div class="d-flex align-items-center col-md-7  col-sm-12">
                   <img src="${
                     product.image
                   }" alt="تصویر محصول" width="100" height="100" class="mx-2 rounded">
                   <div>
                      <div class="title fw-bold">${product.name}</div>
                      <div class="description text-muted small">${
                        product.description
                      }</div>
                   </div>
                </div>
                <div class="d-flex flex-column align-items-start mx-2 col-md-2  col-sm-12">
                  <span class="product-price fw-bold">${new Intl.NumberFormat(
                    "fa-IR"
                  ).format(product.price)} تومان</span>
                </div>
                <div class="d-flex align-items-center mt-2 product-quantity-controls col-md-2  col-sm-12">
                <button class="bg-transparent border-light-subtle  rounded-circle px-1 py-1 fw-bold d-flex align-items-center justify-content-center plusBtn">
                    <img src="./images/plus-svgrepo-com.svg" alt="" width="15" height="15">
                </button>
                <div class="d-inline mx-2"><span class="product-quantity">1</span></div> <span class="ms-2">مورد</span>
                <button class="bg-transparent border-light-subtle rounded-circle px-1 py-1 fw-bold d-flex align-items-center justify-content-center minusBtn">
                    <img src="./images/minus-svgrepo-com.svg" alt="" width="15" height="15">
                </button>
                </div>
              </div>
            </div>
          `;
        productListEl.innerHTML += productHtml; // Append each product
      });

      addQuantityControlListeners();
      addCloseButtonListeners();
      enableOrderControls(); // Enable buttons now that products are rendered
    } else {
      // If no products are returned (empty array) - trigger empty state display
      console.log("renderProducts: Received empty product list.");
      displayEmptyCartState(); // Call the function to show empty cart icon/message
    }
    console.log("<- Exiting renderProducts");
  }

   // --- NEW: Function to display the empty cart state ---
   function displayEmptyCartState() {
       console.log("-> Entering displayEmptyCartState");
       loadingProductsEl.style.display = "none"; // Hide product loading
       productErrorMessageEl.style.display = "none"; // Hide fetch error message
       productListEl.innerHTML = emptyCartHtml; // Set the empty cart HTML
       console.log("<- Empty cart state displayed.");
   }
   // --- END NEW Function ---

   // --- Function to display product fetch error (already existed, refined) ---
   function displayProductFetchError() {
       console.log("-> Entering displayProductFetchError");
       loadingProductsEl.style.display = "none"; // Hide loading
       productListEl.innerHTML = ""; // Clear any previous product list or text
       productErrorMessageEl.style.display = "block"; // Show the error message (text is in HTML)
       console.log("<- Product fetch error message displayed.");
   }
  // --- END Function ---


  function renderDeliveryDays(daysToRender) {
    console.log("-> Entering renderDeliveryDays");
    loadingDeliveryDaysEl.style.display = "none"; // Hide loading message
    deliveryDaysContainerEl.innerHTML = ""; // Clear current content

    if (daysToRender && daysToRender.length > 0) {
      const daysHtml = daysToRender
        .map(
          (day) => `
          <button class="delivery-day my-2 bg-transparent border border-dark-subtle rounded-2 p-3">
            ${day.dayOfWeek} <br> ${day.date}
          </button>
        `
        )
        .join("");
      deliveryDaysContainerEl.innerHTML = daysHtml;
      addDeliveryDayEventListeners();
       deliveryDaysContainerEl.style.display = 'block'; // Ensure delivery days container is visible
    } else {
      deliveryDaysContainerEl.innerHTML =
        "<div class='text-center py-3'>روز تحویلی در دسترس نیست.</div>";
       deliveryDaysContainerEl.style.display = 'block'; // Ensure delivery days container is visible even if empty
    }
    console.log("<- Exiting renderDeliveryDays");
  }

  function renderUserAddress(addressData) {
      console.log("-> Entering renderUserAddress");
      if (!userAddressContainerEl) {
          console.error("User address container element not found!");
          return;
      }
      userAddressContainerEl.innerHTML = ""; // Clear current content

      if (addressData && addressData.fullAddress) {
          const addressHtml = `
              <div class="fw-bold mb-2">آدرس تحویل:</div>
              <p class="mb-0 text-muted small">
                  ${addressData.fullAddress}
              </p>
              `;
          userAddressContainerEl.innerHTML = addressHtml;
          userAddressContainerEl.style.display = 'block'; // Ensure address container is visible
          console.log("User address rendered.");
      } else {
           userAddressContainerEl.innerHTML = `
              <div class="fw-bold mb-2">آدرس تحویل:</div>
              <p class="mb-0 text-muted small">
                  آدرسی ثبت نشده است. لطفا در پروفایل کاربری خود آدرس را وارد کنید.
              </p>
               <a href="#" class="btn btn-sm btn-outline-secondary mt-2">ثبت آدرس</a>
          `;
          userAddressContainerEl.style.display = 'block'; // Ensure address container is visible even if no address data
           console.log("No user address data available to render.");
      }
      console.log("<- Exiting renderUserAddress");
  }


  function updatePrices() {
    console.log("-> Entering updatePrices");
    const productItems = productListEl.querySelectorAll(".product-item");
    let calculatedProductTotalPrice = 0;

    productItems.forEach((item) => {
      const quantitySpan = item.querySelector(".product-quantity");
      const priceSpan = item.querySelector(".product-price");

      if (quantitySpan && priceSpan) {
        const quantity = parseInt(quantitySpan.textContent, 10);
        const priceText = priceSpan.textContent;
        const textWithAsciiDigits = persianToAsciiDigits(priceText);
        const cleanedPriceText = textWithAsciiDigits.replace(/\D/g, "");
        const price = parseInt(cleanedPriceText, 10);

        if (!isNaN(quantity) && !isNaN(price)) {
          calculatedProductTotalPrice += price * quantity;
        } else {
          console.warn(`Could not parse quantity or price for item.`);
        }
      } else {
        console.warn(`Quantity or price span not found for item.`);
      }
    });

    // Update display for each cost item
    if (orderTotalPriceEl) {
      orderTotalPriceEl.textContent =
        new Intl.NumberFormat("fa-IR").format(calculatedProductTotalPrice) + " تومان";
    } else { console.error("Element with id 'order-total-price' not found!"); }

    if (orderShippingCostEl) {
      orderShippingCostEl.textContent =
        new Intl.NumberFormat("fa-IR").format(shippingCost) + " تومان";
    } else { console.error("Element with id 'order-shipping-cost' not found!"); }

     if (orderTaxCostEl) {
      orderTaxCostEl.textContent =
        new Intl.NumberFormat("fa-IR").format(taxCost) + " تومان";
    } else { console.error("Element with id 'order-tax-cost' not found!"); }

    if (orderDiscountEl) {
      orderDiscountEl.textContent =
        new Intl.NumberFormat("fa-IR").format(appliedDiscount) + " تومان";
    } else { console.error("Element with id 'order-discount' not found!"); }


    // Calculate Subtotal (Products + Shipping + Tax)
    const subtotal = calculatedProductTotalPrice + shippingCost + taxCost;

    // Calculate Final Price (Subtotal - Discount)
    let finalPrice = subtotal - appliedDiscount;
    if (finalPrice < 0) {
      finalPrice = 0;
    }

    if (orderFinalPriceEl) {
      orderFinalPriceEl.textContent = new Intl.NumberFormat("fa-IR").format(
        finalPrice
      );
    } else { console.error("Element with id 'order-final-price' not found!"); }


    // Pay button state logic remains based on products count and final price
     if (productItems.length > 0 && finalPrice > 0) {
         if (payButton) {
            payButton.classList.remove("disabled");
            payButton.style.pointerEvents = "auto";
         }
    } else {
         // If this state is reached NOT through handleCriticalState
         if (payButton) {
            payButton.classList.add("disabled");
            payButton.style.pointerEvents = "none";
         }
    }

    console.log("<- Exiting updatePrices");
  }

  function enableOrderControls() {
    console.log("-> Entering enableOrderControls");
    const plusBtns = productListEl.querySelectorAll(".plusBtn");
    const minusBtns = productListEl.querySelectorAll(".minusBtn");
    plusBtns.forEach((btn) => (btn.disabled = false));
    minusBtns.forEach((btn) => (btn.disabled = false));
    if (discountCodeInputEl) {
        discountCodeInputEl.disabled = false; // Enable discount input
        discountCodeInputEl.value = ''; // Clear potential previous code
    }
    if (payButton) { // Ensure button is enabled if conditions met - updatePrices handles the final check
        // payButton.classList.remove("disabled");
        // payButton.style.pointerEvents = "auto";
    }
    paymentOptionItems.forEach(item => item.classList.remove('disabled')); // Enable payment options

    // Restore default selection styling for payment options if any exist
    if (paymentOptionItems.length > 0) {
         paymentOptionItems.forEach((opt) => {
             opt.style.backgroundColor = "";
             opt.classList.remove('border-primary');
             opt.classList.add('border-dark-subtle');
         });
         paymentOptionItems[0].style.backgroundColor = "#3B82F6"; // Select the first one
         paymentOptionItems[0].classList.add('border-primary');
         paymentOptionItems[0].classList.remove('border-dark-subtle');
     }


    console.log("<- Order controls enabled.");
  }

  function disableOrderControls() {
    console.log("-> Entering disableOrderControls");
    const plusBtns = productListEl.querySelectorAll(".plusBtn");
    const minusBtns = productListEl.querySelectorAll(".minusBtn");
    plusBtns.forEach((btn) => (btn.disabled = true));
    minusBtns.forEach((btn) => (btn.disabled = true));
    if (discountCodeInputEl) discountCodeInputEl.disabled = true; // Disable discount input
     if (payButton) {
        payButton.classList.add("disabled");
        payButton.style.pointerEvents = "none";
    }
    paymentOptionItems.forEach(item => item.classList.add('disabled')); // Disable payment options

     // Remove selection styling from payment options when disabled
     paymentOptionItems.forEach((opt) => {
         opt.style.backgroundColor = "";
         opt.classList.remove('border-primary');
         opt.classList.add('border-dark-subtle'); // Or just remove all border classes depending on desired disabled look
     });

    console.log("<- Order controls disabled.");
  }


  // --- Modified to handle both "no products" and "product fetch error" states ---
  // This function sets the state for the UI when products are not successfully loaded or are empty.
  function handleCriticalState(isError = false) { // Simplified parameters
    console.log(`-> Entering handleCriticalState (isError: ${isError})`);

    // Reset costs and discount
    appliedDiscount = 0;
    shippingCost = 0;
    taxCost = 0;

    // Update price displays to 0
    updatePrices(); // This will display 0s based on the reset costs/discount

    // Product List Area
    loadingProductsEl.style.display = "none"; // Hide product loading

    if (isError) {
        productListEl.innerHTML = ""; // Clear product items
        productErrorMessageEl.style.display = "block"; // Show fetch error message (text is in HTML)
        console.log("Displaying product fetch error message.");
    } else {
        productErrorMessageEl.style.display = "none"; // Hide fetch error message
        // Show the empty cart state (icon + "no products" text)
        displayEmptyCartState();
        console.log("Displaying empty cart state message.");
    }


    // Delivery Time Section
    deliveryDaysCardEl.style.display = "block"; // Show the delivery card container
    noProductMessageEl.style.display = "block"; // Show the general error/no-product alert (styled red)
    loadingDeliveryDaysEl.style.display = "none"; // Hide delivery days loading
    deliveryDaysContainerEl.innerHTML = ""; // Clear delivery days content
    deliveryDaysContainerEl.style.display = 'none'; // Hide the delivery days container itself

    if(userAddressContainerEl) {
         userAddressContainerEl.innerHTML = ""; // Clear address content
         userAddressContainerEl.style.display = 'none'; // Hide the address container itself
    }


    // Order Summary Section
    // Prices are already set to 0 by updatePrices() call above
    disableOrderControls(); // This disables discount input and pay button, and payment options

    console.log("<- Exiting handleCriticalState");
  }


  // --- Event Listeners ---
  // (Quantity and Remove button listeners remain the same, but they should only be active
  // if products are rendered. Their actions trigger updatePrices which can handle the
  // state transition to empty/critical state if the last item is removed.)

  // The event listeners for payment options and discount code input are already
  // added once on DOMContentLoaded. Their behavior is now controlled by
  // the 'disabled' class/attribute managed by enable/disableOrderControls.


  function addQuantityControlListeners() {
    console.log("-> Entering addQuantityControlListeners");
    const plusBtns = productListEl.querySelectorAll(".plusBtn");
    const minusBtns = productListEl.querySelectorAll(".minusBtn");

    plusBtns.forEach((button) => {
      button.addEventListener("click", (event) => {
        if (button.disabled) return; // Add check if control is disabled
        const quantitySpan = event.target
          .closest(".product-quantity-controls")
          .querySelector(".product-quantity");
        if (!quantitySpan) return;
        let currentQuantity = parseInt(quantitySpan.textContent, 10);
        currentQuantity++;
        quantitySpan.textContent = currentQuantity;
        updatePrices();
      });
    });

    minusBtns.forEach((button) => {
      button.addEventListener("click", (event) => {
        if (button.disabled) return; // Add check if control is disabled
        const quantitySpan = event.target
          .closest(".product-quantity-controls")
          .querySelector(".product-quantity");
        if (!quantitySpan) return;
        let currentQuantity = parseInt(quantitySpan.textContent, 10);
        if (currentQuantity > 1) {
          currentQuantity--;
          quantitySpan.textContent = currentQuantity;
          updatePrices();
        }
      });
    });
    console.log("<- Quantity control listeners added.");
  }

  function addCloseButtonListeners() {
    console.log("-> Entering addCloseButtonListeners");
    const removeButtons = productListEl.querySelectorAll(".remove-product-btn");

    removeButtons.forEach((button) => {
      button.addEventListener("click", (event) => {
        // No disabled check needed here as the button itself is disabled by disableOrderControls
        const productIdToRemove = event.target.dataset.productId;
        const productItemEl = productListEl.querySelector(
          `.product-item[data-product-id="${productIdToRemove}"]`
        );

        if (productItemEl) {
          productItemEl.remove();
          console.log(`Product with ID ${productIdToRemove} removed.`);
          // Check if this was the last product
          if (productListEl.querySelectorAll(".product-item").length === 0) {
            console.log("Last product removed. Transitioning to empty state.");
            handleCriticalState(false); // It's now an empty state, not a fetch error
          }
           updatePrices(); // Update prices after removing an item (even if it goes to 0)
        }
      });
    });
    console.log("<- Close button listeners added.");
  }

    // Discount code input listener is already set up above and checks .disabled


  // --- Initial Data Fetch and Rendering ---

  async function initializePage() {
    console.log("-> Initializing page...");

    // Set initial states - assume error/no products until data is confirmed
    disableOrderControls(); // Disable controls initially
    appliedDiscount = 0;
    shippingCost = 0;
    taxCost = 0;
    updatePrices(); // Display 0 prices

    // Set initial visibility states for different sections
    deliveryDaysCardEl.style.display = "block"; // Keep the delivery card container visible
    noProductMessageEl.style.display = "none"; // Hide the general error/no-product alert initially
    loadingDeliveryDaysEl.style.display = "block"; // Show delivery days loading before fetch
    deliveryDaysContainerEl.style.display = 'none'; // Hide delivery days list initially
    if (userAddressContainerEl) userAddressContainerEl.style.display = 'none'; // Hide address container initially

    loadingProductsEl.style.display = "block"; // Show product loading
    productListEl.innerHTML = ""; // Clear product list area
    productErrorMessageEl.style.display = "none"; // Hide product error message initially


    try {
      // --- Fetch Products ---
      // Simulate a fetch error if needed by uncommenting the reject line in fetchProducts
      productsData = await fetchProducts();
      console.log("Products fetched:", productsData);

      if (productsData && productsData.length > 0) {
        // Success state: Products fetched and available
        renderProducts(productsData);
        console.log("Products rendered.");

        noProductMessageEl.style.display = "none"; // Hide no product message

        // --- Fetch other data concurrently ---
        try {
            const [deliveryDays, userAddress, fetchedShipping, fetchedTax] = await Promise.all([
                fetchDeliveryDays(),
                fetchUserAddress(),
                fetchShippingCost(),
                fetchTaxCost()
            ]);
            renderDeliveryDays(deliveryDays);
            renderUserAddress(userAddress);
            loadingDeliveryDaysEl.style.display = "none";
            shippingCost = fetchedShipping;
            taxCost = fetchedTax;
             console.log("Other data (Delivery, Address, Costs) fetched.");
        } catch (fetchOtherDataError) {
            console.error("Could not fetch other data (Delivery, Address, Costs):", fetchOtherDataError);
             // Render empty/error states for these specific sections, but don't go to full critical state
             // as products were loaded successfully.
            renderDeliveryDays([]); // Render empty state for delivery days on error
            renderUserAddress(null); // Render empty state for address on error
            loadingDeliveryDaysEl.style.display = "none";
            shippingCost = 0; // Ensure costs are 0 on error
            taxCost = 0;
        }

        // Now update prices based on fetched products, shipping, and tax
        updatePrices();
        enableOrderControls(); // Enable controls since products are available

      } else {
        // "No products" state: Fetch was successful, but returned an empty array
        console.log("No products fetched (empty data). Transitioning to empty state.");
        handleCriticalState(false); // It's an empty state, not a fetch error
      }
    } catch (error) {
      // Critical Error state: Fetching products failed (network error, server error, etc.)
      console.error(
        "Critical error during page initialization (product fetch failed):",
        error
      );
       // Use handleCriticalState for the fetch error message
      handleCriticalState(true); // It's a fetch error state
    }
    console.log("<- Initializing page finished.");
  }

  initializePage();
});
