/*کد ها با api شبی سازی شده*/
document.addEventListener("DOMContentLoaded", () => {
  const productListEl = document.getElementById("product-list");
  const loadingProductsEl = document.getElementById("loading-products");
  // --- Get reference to the product error message element ---
  const productErrorMessageEl = document.getElementById("product-error-message"); // Element for fetch errors

  const orderTotalPriceEl = document.getElementById("order-total-price");
  const orderShippingCostEl = document.getElementById("order-shipping-cost");
  const orderTaxCostEl = document.getElementById("order-tax-cost");
  const orderDiscountEl = document.getElementById("order-discount");
  const orderFinalPriceEl = document.getElementById("order-final-price");

  const deliveryDaysCardEl = document.getElementById("delivery-days-card");
  const deliveryDaysContainerEl = document.getElementById(
    "delivery-days-container"
  );
  const loadingDeliveryDaysEl = document.getElementById(
    "loading-delivery-days"
  );
  const noProductMessageEl = document.getElementById("no-product-message"); // This serves as a general error/no-product alert

  const payButton = document.getElementById("pay-button");
  const productCardBody = document.querySelector(".col-md-9 .card-body");
  const userAddressContainerEl = document.getElementById(
    "user-address-container"
  );
  const discountCodeInputEl = document.getElementById("discount-code-input");
  const paymentOptionItems = document.querySelectorAll(".option-item");


  let productsData = [];
  let appliedDiscount = 0;
  let shippingCost = 0;
  let taxCost = 0;


  const persianToAsciiDigits = (text) => {
    const persianDigits = ["۰", "۱", "۲", "۳", "۴", "۵", "۶", "۷", "۸", "۹"];
    const asciiDigits = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"];
    let result = "";
    if (text === null || text === undefined) {
      return "";
    }
    text = String(text);

    for (let i = 0; i < text.length; i++) {
      const char = text[i];
      const persianIndex = persianDigits.indexOf(char);
      if (persianIndex > -1) {
        result += asciiDigits[persianIndex];
      } else {
        result += char;
      }
    }
    return result;
  };

  // --- Simulated API Calls ---

  async function fetchProducts() {
    console.log("-> Fetching products...");
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        // --- SIMULATING FETCH ERROR ---
        reject(new Error("Failed to fetch products")); // Uncomment this line to simulate a fetch error
        // const data = []; // Comment or remove these lines if you want to simulate only error
        // resolve(data); // Comment or remove these lines
        console.log("<- Fetching products simulation finished.");
      }, 700); // Simulate network delay
    });
  }

  // --- Simulated API for Discount Codes ---
  async function fetchDiscountCodes() {
    console.log("-> Fetching discount codes...");
    return new Promise((resolve) => {
      setTimeout(() => {
        const data = [
          { code: "SALE10", amount: 500000 },
          { code: "ZARISFREE", amount: 19000 },
        ];
        console.log("<- Fetching discount codes resolved with data:", data);
        resolve(data);
      }, 400);
    });
  }

  async function fetchDeliveryDays() {
    console.log("-> Fetching delivery days...");
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        const data = [
          { dayOfWeek: "شنبه", date: "۷ بهمن" },
          { dayOfWeek: "یکشنبه", date: "۸ بهمن" },
          { dayOfWeek: "دوشنبه", date: "۹ بهمن" },
        ];
        // const data = []; // Uncomment this line to simulate no delivery days fetched (Optional for testing)
         // reject(new Error("Failed to fetch delivery days")); // Uncomment to simulate error (Optional for testing)
        console.log("<- Fetching delivery days resolved with data:", data);
        resolve(data);
      }, 500);
    });
  }

  async function fetchUserAddress() {
      console.log("-> Fetching user address...");
      return new Promise((resolve, reject) => {
          setTimeout(() => {
              const addressData = {
                  street: "خیابان انقلاب، کوچه دانشگاه",
                  building: "پلاک ۱۲",
                  unit: "واحد ۳",
                  city: "تهران",
                  postalCode: "۱۲۳۴۵۶۷۸۹۰",
                  fullAddress: "تهران، خیابان انقلاب، کوچه دانشگاه، پلاک ۱۲، واحد ۳، کد پستی: ۱۲۳۴۵۶۷۸۹۰"
              };
              // const addressData = null; // Uncomment to simulate no address found (Optional for testing)
              // reject(new Error("Failed to fetch address")); // Uncomment to simulate error (Optional for testing)
              console.log("<- Fetching user address resolved with data:", addressData);
              resolve(addressData);
          }, 600);
      });
  }

  async function fetchShippingCost() {
      console.log("-> Fetching shipping cost...");
      return new Promise((resolve, reject) => {
          setTimeout(() => {
              const cost = 19000;
              // reject(new Error("Failed to fetch shipping cost")); // Uncomment to simulate error (Optional for testing)
              console.log("<- Fetching shipping cost resolved with data:", cost);
              resolve(cost);
          }, 450);
      });
  }

   async function fetchTaxCost() {
      console.log("-> Fetch tax cost...");
       return new Promise((resolve, reject) => {
          setTimeout(() => {
               const cost = 50000;
              // reject(new Error("Failed to fetch tax cost")); // Uncomment to simulate error (Optional for testing)
               console.log("<- Fetching tax cost resolved with data:", cost);
              resolve(cost);
          }, 350);
       });
   }
  // --- End Simulated API Calls ---


  // --- Rendering Functions ---

  // renderProducts function is not needed for the error state, it's for successful product rendering
  // We will clear productListEl directly in the error handler.


  function renderDeliveryDays(daysToRender) {
    console.log("-> Entering renderDeliveryDays");
    deliveryDaysContainerEl.innerHTML = "";
    loadingDeliveryDaysEl.style.display = "none";

    if (daysToRender && daysToRender.length > 0) {
      const daysHtml = daysToRender
        .map(
          (day) => `
          <button class="delivery-day my-2 bg-transparent border border-dark-subtle rounded-2 p-3">
            ${day.dayOfWeek} <br> ${day.date}
          </button>
        `
        )
        .join("");
      deliveryDaysContainerEl.innerHTML = daysHtml;
      addDeliveryDayEventListeners();
       deliveryDaysContainerEl.style.display = 'block';
    } else {
      deliveryDaysContainerEl.innerHTML =
        "<div class='text-center py-3'>روز تحویلی در دسترس نیست.</div>";
       deliveryDaysContainerEl.style.display = 'block';
    }
    console.log("<- Exiting renderDeliveryDays");
  }

  function renderUserAddress(addressData) {
      console.log("-> Entering renderUserAddress");
      if (!userAddressContainerEl) {
          console.error("User address container element not found!");
          return;
      }
      userAddressContainerEl.innerHTML = "";

      if (addressData && addressData.fullAddress) {
          const addressHtml = `
              <div class="fw-bold mb-2">آدرس تحویل:</div>
              <p class="mb-0 text-muted small">
                  ${addressData.fullAddress}
              </p>
          `;
          userAddressContainerEl.innerHTML = addressHtml;
          userAddressContainerEl.style.display = 'block';
          console.log("User address rendered.");
      } else {
           userAddressContainerEl.innerHTML = `
              <div class="fw-bold mb-2">آدرس تحویل:</div>
              <p class="mb-0 text-muted small">
                  آدرسی ثبت نشده است. لطفا در پروفایل کاربری خود آدرس را وارد کنید.
              </p>
               <a href="#" class="btn btn-sm btn-outline-secondary mt-2">ثبت آدرس</a>
          `;
          userAddressContainerEl.style.display = 'block';
           console.log("No user address data available to render.");
      }
      console.log("<- Exiting renderUserAddress");
  }


  function updatePrices() {
    console.log("-> Entering updatePrices");
    // In the error state, this will run with calculatedProductTotalPrice = 0
    // as productListEl will be empty or cleared.
    const productItems = productListEl.querySelectorAll(".product-item");
    let calculatedProductTotalPrice = 0;

    productItems.forEach((item) => {
      const quantitySpan = item.querySelector(".product-quantity");
      const priceSpan = item.querySelector(".product-price");

      if (quantitySpan && priceSpan) {
        const quantity = parseInt(quantitySpan.textContent, 10);
        const priceText = priceSpan.textContent;
        const textWithAsciiDigits = persianToAsciiDigits(priceText);
        const cleanedPriceText = textWithAsciiDigits.replace(/\D/g, "");
        const price = parseInt(cleanedPriceText, 10);

        if (!isNaN(quantity) && !isNaN(price)) {
          calculatedProductTotalPrice += price * quantity;
        }
      }
    });

    if (orderTotalPriceEl) {
      orderTotalPriceEl.textContent =
        new Intl.NumberFormat("fa-IR").format(calculatedProductTotalPrice) + " تومان";
    }

    if (orderShippingCostEl) {
      orderShippingCostEl.textContent =
        new Intl.NumberFormat("fa-IR").format(shippingCost) + " تومان";
    }

     if (orderTaxCostEl) {
      orderTaxCostEl.textContent =
        new Intl.NumberFormat("fa-IR").format(taxCost) + " تومان";
    }

    if (orderDiscountEl) {
      orderDiscountEl.textContent =
        new Intl.NumberFormat("fa-IR").format(appliedDiscount) + " تومان";
    }


    const subtotal = calculatedProductTotalPrice + shippingCost + taxCost;

    let finalPrice = subtotal - appliedDiscount;
    if (finalPrice < 0) {
      finalPrice = 0;
    }

    if (orderFinalPriceEl) {
      orderFinalPriceEl.textContent = new Intl.NumberFormat("fa-IR").format(
        finalPrice
      );
    }

     // Pay button state logic - disabled if no products or final price is 0
     // This logic will disable the button correctly in the error state.
    if (productItems.length === 0 || finalPrice <= 0) {
         if (payButton) {
            payButton.classList.add("disabled");
            payButton.style.pointerEvents = "none";
         }
    } else {
         if (payButton) {
            payButton.classList.remove("disabled");
            payButton.style.pointerEvents = "auto";
         }
    }

    console.log("<- Exiting updatePrices");
  }

  function enableOrderControls() {
    console.log("-> Entering enableOrderControls");
    const plusBtns = productListEl.querySelectorAll(".plusBtn");
    const minusBtns = productListEl.querySelectorAll(".minusBtn");
    plusBtns.forEach((btn) => (btn.disabled = false));
    minusBtns.forEach((btn) => (btn.disabled = false));
    if (discountCodeInputEl) {
        discountCodeInputEl.disabled = false;
        discountCodeInputEl.value = '';
    }
    // Pay button state is managed by updatePrices
    paymentOptionItems.forEach(item => item.classList.remove('disabled'));

     if (paymentOptionItems.length > 0) {
         paymentOptionItems.forEach((opt) => {
             opt.style.backgroundColor = "";
             opt.classList.remove('border-primary');
             opt.classList.add('border-dark-subtle');
         });
         paymentOptionItems[0].style.backgroundColor = "#3B82F6";
         paymentOptionItems[0].classList.add('border-primary');
         paymentOptionItems[0].classList.remove('border-dark-subtle');
     }

    console.log("<- Order controls enabled.");
  }

  function disableOrderControls() {
    console.log("-> Entering disableOrderControls");
    const plusBtns = productListEl.querySelectorAll(".plusBtn");
    const minusBtns = productListEl.querySelectorAll(".minusBtn");
    plusBtns.forEach((btn) => (btn.disabled = true));
    minusBtns.forEach((btn) => (btn.disabled = true));
    if (discountCodeInputEl) discountCodeInputEl.disabled = true;
     if (payButton) {
        payButton.classList.add("disabled");
        payButton.style.pointerEvents = "none";
    }
    paymentOptionItems.forEach(item => item.classList.add('disabled'));

     paymentOptionItems.forEach((opt) => {
         opt.style.backgroundColor = "";
         opt.classList.remove('border-primary');
         opt.classList.add('border-dark-subtle');
     });

    console.log("<- Order controls disabled.");
  }


  // --- handleCriticalState - Used for both Fetch Error and No Products ---
  // This function sets the state for the UI when products are not successfully loaded or are empty.
  // Pass isError = true for fetch errors, isError = false for empty data.
  function handleCriticalState(isError = false) {
    console.log(`-> Entering handleCriticalState (isError: ${isError})`);

    // Reset costs and discount
    appliedDiscount = 0;
    shippingCost = 0;
    taxCost = 0;

    // Update price displays to 0
    updatePrices(); // This will display 0s based on the reset costs/discount

    // Product List Area
    loadingProductsEl.style.display = "none"; // Hide product loading
    productListEl.innerHTML = ""; // Clear product items

    if (isError) {
         productErrorMessageEl.style.display = "block"; // Show fetch error message (text is in HTML)
         console.log("Displaying product fetch error message.");
    } else {
         // This case (isError = false) happens if fetchProducts returns [],
         // or if the last product is removed.
         productErrorMessageEl.style.display = "none"; // Hide fetch error message
         productListEl.innerHTML = "<div class='text-center py-5'>محصولی برای نمایش وجود ندارد.</div>"; // Display "no products" text
         console.log("Displaying 'no products' message.");
    }


    // Delivery Time Section
    deliveryDaysCardEl.style.display = "block"; // Show the delivery card container
    noProductMessageEl.style.display = "block"; // Show the general error/no-product alert (styled red)
    loadingDeliveryDaysEl.style.display = "none"; // Hide delivery days loading
    deliveryDaysContainerEl.innerHTML = ""; // Clear delivery days content
    deliveryDaysContainerEl.style.display = 'none'; // Hide the delivery days container itself

    if(userAddressContainerEl) {
         userAddressContainerEl.innerHTML = ""; // Clear address content
         userAddressContainerEl.style.display = 'none'; // Hide the address container itself
    }


    // Order Summary/Payment: Disable controls
    disableOrderControls();

    console.log("<- Exiting handleCriticalState");
  }


  // --- Event Listeners ---
  // (Quantity and Remove button listeners remain, with disabled checks added)


  const optionItems = document.querySelectorAll(".option-item");
  optionItems.forEach((item) => {
    item.addEventListener("click", function () {
        if (!this.classList.contains('disabled')) { // Check if not disabled
            optionItems.forEach((opt) => {
                opt.style.backgroundColor = "";
                 opt.classList.remove('border-primary');
                 opt.classList.add('border-dark-subtle');
            });
            this.style.backgroundColor = "#3B82F6";
            this.classList.add('border-primary');
            this.classList.remove('border-dark-subtle');
            console.log("Payment option clicked.");
        }
    });
  });

   // Initial selection styling for payment options - Added check if items exist
    if (optionItems.length > 0) {
        // Only select the first item initially if it's not disabled (which it will be in error state)
        if (!optionItems[0].classList.contains('disabled')) {
            optionItems[0].style.backgroundColor = "#3B82F6";
             optionItems[0].classList.add('border-primary');
             optionItems[0].classList.remove('border-dark-subtle');
        }
    }


  function addDeliveryDayEventListeners() { // Kept
    console.log("-> Entering addDeliveryDayEventListeners");
    const deliveryButtons = document.querySelectorAll(".delivery-day");
    deliveryButtons.forEach((button) => {
      button.addEventListener("click", () => {
        deliveryButtons.forEach((btn) => {
          btn.classList.remove("bg-primary", "text-white", "border-0");
          btn.classList.add("bg-transparent", "border", "border-dark-subtle");
        });

        button.classList.remove("bg-transparent", "border-dark-subtle");
        button.classList.add("bg-primary", "text-white", "border-0");
        console.log("Delivery day selected.");
      });
    });
    console.log("<- Delivery day listeners added.");
  }


  function addQuantityControlListeners() { // Kept, added disabled check
    console.log("-> Entering addQuantityControlListeners");
    const plusBtns = productListEl.querySelectorAll(".plusBtn");
    const minusBtns = productListEl.querySelectorAll(".minusBtn");

    plusBtns.forEach((button) => {
      button.addEventListener("click", (event) => {
        if (button.disabled) return;
        const quantitySpan = event.target
          .closest(".product-quantity-controls")
          .querySelector(".product-quantity");
        if (!quantitySpan) return;
        let currentQuantity = parseInt(quantitySpan.textContent, 10);
        currentQuantity++;
        quantitySpan.textContent = currentQuantity;
        updatePrices();
      });
    });

    minusBtns.forEach((button) => {
      button.addEventListener("click", (event) => {
        if (button.disabled) return;
        const quantitySpan = event.target
          .closest(".product-quantity-controls")
          .querySelector(".product-quantity");
        if (!quantitySpan) return;
        let currentQuantity = parseInt(quantitySpan.textContent, 10);
        if (currentQuantity > 1) {
          currentQuantity--;
          quantitySpan.textContent = currentQuantity;
          updatePrices();
        }
      });
    });
    console.log("<- Quantity control listeners added.");
  }

  function addCloseButtonListeners() { // Kept, calls handleCriticalState(false) when empty
    console.log("-> Entering addCloseButtonListeners");
    const removeButtons = productListEl.querySelectorAll(".remove-product-btn");

    removeButtons.forEach((button) => {
      button.addEventListener("click", (event) => {
        // No disabled check needed here as the button itself is disabled by disableOrderControls
        const productIdToRemove = event.target.dataset.productId;
        const productItemEl = productListEl.querySelector(
          `.product-item[data-product-id="${productIdToRemove}"]`
        );

        if (productItemEl) {
          productItemEl.remove();
          console.log(`Product with ID ${productIdToRemove} removed.`);
          if (productListEl.querySelectorAll(".product-item").length === 0) {
            console.log("Last product removed. Calling handleCriticalState(false).");
            handleCriticalState(false); // Call with isError=false for empty state
          }
           updatePrices(); // Always update prices after removing an item
        }
      });
    });
    console.log("<- Close button listeners added.");
  }

    // Discount code input listener kept, includes disabled check


  if (discountCodeInputEl) {
    discountCodeInputEl.addEventListener("change", async (event) => {
      if (discountCodeInputEl.disabled) return;

      console.log("-> Discount code input changed.");
      const enteredCode = event.target.value.trim();
      appliedDiscount = 0;

      if (enteredCode) {
        try {
          console.log("Fetching available discount codes...");
          const availableCodes = await fetchDiscountCodes();

          console.log(
            `Checking entered code "${enteredCode}" against available codes:`,
            availableCodes
          );
          const validCode = availableCodes.find(
            (code) => code.code.toUpperCase() === enteredCode.toUpperCase()
          );

          if (validCode) {
            appliedDiscount = validCode.amount;
            console.log(
              `Valid discount code "${enteredCode}" applied. Discount amount: ${appliedDiscount}`
            );
          } else {
            appliedDiscount = 0;
            console.log(
              `Invalid discount code entered: "${enteredCode}". No discount applied.`
            );
          }
        } catch (error) {
          console.error("Error fetching or applying discount code:", error);
          appliedDiscount = 0;
        }
      } else {
        console.log(
          "Discount code input cleared. Applied discount reset to 0."
        );
        appliedDiscount = 0;
      }

      updatePrices();
      console.log("<- Discount code input change listener finished.");
    });
    console.log("Discount code input listener added.");
  }


  // --- Initial Data Fetch and Rendering ---

  async function initializePage() {
    console.log("-> Initializing page...");

    // Set initial states - assume no products/error until products are loaded
    disableOrderControls(); // Disable controls initially
    appliedDiscount = 0;
    shippingCost = 0;
    taxCost = 0;
    updatePrices(); // Display 0 prices

    // Set initial visibility states
    deliveryDaysCardEl.style.display = "block"; // Keep the delivery card container visible
    noProductMessageEl.style.display = "none"; // Hide the "no product" alert initially
    loadingDeliveryDaysEl.style.display = "block"; // Show delivery days loading before fetch
    deliveryDaysContainerEl.style.display = 'none'; // Hide delivery days list initially
     if (userAddressContainerEl) userAddressContainerEl.style.display = 'none'; // Hide address container initially

    loadingProductsEl.style.display = "block"; // Show product loading
    productListEl.innerHTML = ""; // Clear product list area
    productErrorMessageEl.style.display = "none"; // Hide product error message initially


    try {
      // --- Fetch Products ---
      // This is set to reject() to simulate the error as requested
      productsData = await fetchProducts();
      console.log("Products fetched:", productsData); // This line won't be reached in error state

      if (productsData && productsData.length > 0) {
        // This block handles the success case, which won't happen with reject()
        renderProducts(productsData);
        console.log("Products rendered.");

        noProductMessageEl.style.display = "none";

        try {
            const [deliveryDays, userAddress, fetchedShipping, fetchedTax] = await Promise.all([
                fetchDeliveryDays(),
                fetchUserAddress(),
                fetchShippingCost(),
                fetchTaxCost()
            ]);
            renderDeliveryDays(deliveryDays);
            renderUserAddress(userAddress);
            loadingDeliveryDaysEl.style.display = "none";
            shippingCost = fetchedShipping;
            taxCost = fetchedTax;
             console.log("Other data fetched.");
        } catch (fetchOtherDataError) {
            console.error("Could not fetch other data:", fetchOtherDataError);
             renderDeliveryDays([]);
            renderUserAddress(null);
            loadingDeliveryDaysEl.style.display = "none";
            shippingCost = 0;
            taxCost = 0;
        }

        updatePrices();
        // enableOrderControls() is called by renderProducts if products exist

      } else {
         // This block handles fetchProducts returning [], not a fetch error.
         // With reject() in fetchProducts, this block also won't be reached.
        console.log("No products fetched (empty data
