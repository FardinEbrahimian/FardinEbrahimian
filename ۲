/*کد ها بدون api شبیه سازی شده و در حالت خطا در بارگذاری محصولات*/
document.addEventListener("DOMContentLoaded", () => {
  const productListEl = document.getElementById("product-list");
  const loadingProductsEl = document.getElementById("loading-products");
  const orderTotalPriceEl = document.getElementById("order-total-price");
  const orderShippingCostEl = document.getElementById("order-shipping-cost");
  const orderTaxCostEl = document.getElementById("order-tax-cost");
  const orderDiscountEl = document.getElementById("order-discount");
  const orderFinalPriceEl = document.getElementById("order-final-price");
  const deliveryDaysCardEl = document.getElementById("delivery-days-card");
  const deliveryHeaderEl = document.getElementById("delivery-header"); // اضافه شده برای پنهان کردن سربرگ زمان تحویل
  const deliveryDaysContainerEl = document.getElementById(
    "delivery-days-container"
  );
  const loadingDeliveryDaysEl = document.getElementById(
    "loading-delivery-days"
  );
  const noProductMessageEl = document.getElementById("no-product-message");
  const payButton = document.getElementById("pay-button");
  const productCardBody = document.querySelector(".col-md-9 .card-body");
  const userAddressContainerEl = document.getElementById(
    "user-address-container"
  );
  const discountCodeInputEl = document.getElementById("discount-code-input");
  const paymentOptionsContainerEl = document.getElementById("payment-options-container"); // اضافه شده برای دسترسی به درگاه‌ها


  let productsData = [];
  let appliedDiscount = 0;
  let shippingCost = 0;
  let taxCost = 0;

  const persianToAsciiDigits = (text) => {
    const persianDigits = ["۰", "۱", "۲", "۳", "۴", "۵", "۶", "۷", "۸", "۹"];
    const asciiDigits = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"];
    let result = "";
    if (text === null || text === undefined) {
      return "";
    }
    text = String(text);

    for (let i = 0; i < text.length; i++) {
      const char = text[i];
      const persianIndex = persianDigits.indexOf(char);
      if (persianIndex > -1) {
        result += asciiDigits[persianIndex];
      } else {
        result += char;
      }
    }
    return result;
  };

  // --- Simulated API Calls (Modified for Error State) ---

  async function fetchProducts() {
    console.log("-> Fetching products...");
    // Simulate fetching product data from an API
    return new Promise((_, reject) => { // تغییر به reject برای شبیه سازی خطا
      setTimeout(() => {
        console.error("Simulating product load error!"); // لاگ خطای شبیه سازی شده
        reject(new Error("Simulated product load error")); // پرتاب خطا
      }, 700); // Simulate network delay
    });
  }

  // این توابع شبیه سازی شده برای حفظ ساختار باقی می‌مانند،
  // اما در حالت خطای محصولات، ممکن است فراخوانی نشوند یا خروجی آن‌ها نادیده گرفته شود.
  async function fetchDiscountCodes() {
      console.log("-> Fetching discount codes...");
       return new Promise((resolve) => {
        setTimeout(() => {
          const data = []; // برگرداندن آرایه خالی یا خطا برای شبیه سازی
          console.log("<- Fetching discount codes resolved (or simulated error).");
          resolve(data); // یا reject(new Error("..."))
        }, 400);
      });
  }

  async function fetchDeliveryDays() {
      console.log("-> Fetching delivery days...");
       return new Promise((resolve) => {
        setTimeout(() => {
          const data = []; // برگرداندن آرایه خالی برای شبیه سازی حالت بدون روز تحویل
          console.log("<- Fetching delivery days resolved with empty data.");
          resolve(data);
        }, 500);
      });
  }

  async function fetchUserAddress() {
      console.log("-> Fetching user address...");
      return new Promise((resolve) => {
          setTimeout(() => {
              const addressData = {
                  street: "خیابان انقلاب، کوچه دانشگاه",
                  building: "پلاک ۱۲",
                  unit: "واحد ۳",
                  city: "تهران",
                  postalCode: "۱۲۳۴۵۶۷۸۹۰",
                  fullAddress: "تهران، خیابان انقلاب، کوچه دانشگاه، پلاک ۱۲، واحد ۳، کد پستی: ۱۲۳۴۵۶۷۸۹۰" // Concatenated for simplicity
              };
               // const addressData = null; // Uncomment to simulate no address found
              console.log("<- Fetching user address resolved with data:", addressData);
              resolve(addressData);
          }, 600);
      });
  }

   async function fetchShippingCost() {
      console.log("-> Fetching shipping cost...");
       return new Promise((resolve) => {
          setTimeout(() => {
              const cost = 0; // در حالت خطا هزینه ارسال 0 شبیه سازی می‌شود
              console.log("<- Fetching shipping cost resolved with data:", cost);
              resolve(cost);
          }, 450);
      });
  }

   async function fetchTaxCost() {
      console.log("-> Fetching tax cost...");
       return new Promise((resolve) => {
          setTimeout(() => {
               const cost = 0; // در حالت خطا هزینه مالیات 0 شبیه سازی می‌شود
               console.log("<- Fetching tax cost resolved with data:", cost);
              resolve(cost);
          }, 350);
      });
   }


  // --- Rendering Functions (Simplified for Error State) ---

  function renderProducts(productsToRender) {
    // این تابع در حالت خطا فراخوانی نمی‌شود، محتوای بخش محصولات مستقیماً در catch تنظیم می‌شود
    console.log("-> renderProducts called, but should not happen in error state.");
  }

  function renderDeliveryDays(daysToRender) {
    // این تابع در حالت خطا فراخوانی نمی‌شود، بخش زمان تحویل پنهان می‌شود
     console.log("-> renderDeliveryDays called, but should not happen in error state.");
  }

  function renderUserAddress(addressData) {
      console.log("-> Entering renderUserAddress");
      if (!userAddressContainerEl) {
          console.error("User address container element not found!");
          return;
      }
      userAddressContainerEl.innerHTML = ""; // Clear current content

      if (addressData && addressData.fullAddress) {
          const addressHtml = `
              <div class="fw-bold mb-2">آدرس تحویل:</div>
              <p class="mb-0 text-muted small">
                  ${addressData.fullAddress}
              </p>
              `;
          userAddressContainerEl.innerHTML = addressHtml;
          console.log("User address rendered.");
      } else {
           userAddressContainerEl.innerHTML = `
              <div class="fw-bold mb-2">آدرس تحویل:</div>
              <p class="mb-0 text-muted small">
                  بارگذاری آدرس با خطا مواجه شد یا آدرسی ثبت نشده است.
              </p>
              `;
           console.log("No user address data available to render.");
      }
      console.log("<- Exiting renderUserAddress");
  }


  // --- Update Order Details and Payment ---

  function updatePrices() {
    console.log("-> Entering updatePrices");
    // در حالت خطا، این مقادیر قبلاً در catch به 0 تنظیم شده‌اند
    const calculatedProductTotalPrice = 0;

    console.log("Total Product Price:", calculatedProductTotalPrice);
    console.log("Shipping Cost:", shippingCost);
    console.log("Tax Cost:", taxCost);
    console.log("Applied Discount:", appliedDiscount);

    if (orderTotalPriceEl) {
      orderTotalPriceEl.textContent =
        new Intl.NumberFormat("fa-IR").format(calculatedProductTotalPrice) + " تومان";
    } else { console.error("Element with id 'order-total-price' not found!"); }

    if (orderShippingCostEl) {
      orderShippingCostEl.textContent =
        new Intl.NumberFormat("fa-IR").format(shippingCost) + " تومان";
    } else { console.error("Element with id 'order-shipping-cost' not found!"); }
