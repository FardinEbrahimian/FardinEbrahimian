/*کد ها با api شبی سازی شده*/
document.addEventListener("DOMContentLoaded", () => {
  const productListEl = document.getElementById("product-list");
  const loadingProductsEl = document.getElementById("loading-products");
  // --- NEW: Get reference to the product error message element ---
  const productErrorMessageEl = document.getElementById(
    "product-error-message"
  );

  const orderTotalPriceEl = document.getElementById("order-total-price");
  const orderShippingCostEl = document.getElementById("order-shipping-cost");
  const orderTaxCostEl = document.getElementById("order-tax-cost");
  const orderDiscountEl = document.getElementById("order-discount");
  const orderFinalPriceEl = document.getElementById("order-final-price");

  const deliveryDaysCardEl = document.getElementById("delivery-days-card");
  const deliveryDaysContainerEl = document.getElementById(
    "delivery-days-container"
  );
  const loadingDeliveryDaysEl = document.getElementById(
    "loading-delivery-days"
  );
  const noProductMessageEl = document.getElementById("no-product-message"); // This will now serve as a general error message

  const payButton = document.getElementById("pay-button");
  const productCardBody = document.querySelector(".col-md-9 .card-body");
  const userAddressContainerEl = document.getElementById(
    "user-address-container"
  );
  const discountCodeInputEl = document.getElementById("discount-code-input");
  // --- NEW: Get reference to payment option items ---
  const paymentOptionItems = document.querySelectorAll(".option-item");

  let productsData = [];
  let appliedDiscount = 0;
  let shippingCost = 0;
  let taxCost = 0;

  const persianToAsciiDigits = (text) => {
    const persianDigits = ["۰", "۱", "۲", "۳", "۴", "۵", "۶", "۷", "۸", "۹"];
    const asciiDigits = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"];
    let result = "";
    if (text === null || text === undefined) {
      return "";
    }
    text = String(text);

    for (let i = 0; i < text.length; i++) {
      const char = text[i];
      const persianIndex = persianDigits.indexOf(char);
      if (persianIndex > -1) {
        result += asciiDigits[persianIndex];
      } else {
        result += char;
      }
    }
    return result;
  };

  // --- Simulated API Calls (These remain the same for now, simulation still needed) ---

  async function fetchProducts() {
    console.log("-> Fetching products...");
    return new Promise((resolve, reject) => {
      // Added reject
      setTimeout(() => {
        const data = [
          {
            id: 1,
            name: "اسپرسو ساز فیلیپس اتوماتیک سایکو",
            description: "گارانتی اصالت و سلامت فیزیکی کالا",
            price: 17800000,
            image:
              "./images/و-قیمت-اسپرسو-ساز-فیلیپس-اتوماتیک-سایکو-مدل-Saeco-SM878500-Xelsis-Deluxe-3.webp",
          },
          {
            id: 2,
            name: "محصول نمونه دیگر",
            description: "توضیحات محصول دوم برای تست لیست",
            price: 5000000,
            image: "https://via.placeholder.com/100",
          },
        ];
        // const data = []; // Uncomment this line to simulate no products
        // reject(new Error("Failed to fetch products")); // Uncomment this line to simulate a fetch error
        console.log("<- Fetching products resolved with data:", data);
        resolve(data);
      }, 700);
    });
  }

  async function fetchDiscountCodes() {
    console.log("-> Fetching discount codes...");
    return new Promise((resolve) => {
      setTimeout(() => {
        const data = [
          { code: "SALE10", amount: 500000 },
          { code: "ZARISFREE", amount: 19000 },
        ];
        console.log("<- Fetching discount codes resolved with data:", data);
        resolve(data);
      }, 400);
    });
  }

  async function fetchDeliveryDays() {
    console.log("-> Fetching delivery days...");
    return new Promise((resolve, reject) => {
      // Added reject
      setTimeout(() => {
        const data = [
          { dayOfWeek: "شنبه", date: "۷ بهمن" },
          { dayOfWeek: "یکشنبه", date: "۸ بهمن" },
          { dayOfWeek: "دوشنبه", date: "۹ بهمن" },
        ];
        // const data = []; // Uncomment this line to simulate no delivery days fetched
        // reject(new Error("Failed to fetch delivery days")); // Uncomment to simulate error
        console.log("<- Fetching delivery days resolved with data:", data);
        resolve(data);
      }, 500);
    });
  }

  async function fetchUserAddress() {
    console.log("-> Fetching user address...");
    return new Promise((resolve, reject) => {
      // Added reject
      setTimeout(() => {
        const addressData = {
          street: "خیابان انقلاب، کوچه دانشگاه",
          building: "پلاک ۱۲",
          unit: "واحد ۳",
          city: "تهران",
          postalCode: "۱۲۳۴۵۶۷۸۹۰",
          fullAddress:
            "تهران، خیابان انقلاب، کوچه دانشگاه، پلاک ۱۲، واحد ۳، کد پستی: ۱۲۳۴۵۶۷۸۹۰",
        };
        // const addressData = null; // Uncomment to simulate no address found
        // reject(new Error("Failed to fetch address")); // Uncomment to simulate error
        console.log(
          "<- Fetching user address resolved with data:",
          addressData
        );
        resolve(addressData);
      }, 600);
    });
  }

  async function fetchShippingCost() {
    console.log("-> Fetching shipping cost...");
    return new Promise((resolve, reject) => {
      // Added reject
      setTimeout(() => {
        const cost = 19000;
        // reject(new Error("Failed to fetch shipping cost")); // Uncomment to simulate error
        console.log("<- Fetching shipping cost resolved with data:", cost);
        resolve(cost);
      }, 450);
    });
  }

  async function fetchTaxCost() {
    console.log("-> Fetching tax cost...");
    return new Promise((resolve, reject) => {
      // Added reject
      setTimeout(() => {
        const cost = 50000;
        // reject(new Error("Failed to fetch tax cost")); // Uncomment to simulate error
        console.log("<- Fetching tax cost resolved with data:", cost);
        resolve(cost);
      }, 350);
    });
  }
  // --- End Simulated API Calls ---

  // --- Rendering Functions ---

  function renderProducts(productsToRender) {
    console.log("-> Entering renderProducts");
    loadingProductsEl.style.display = "none"; // Hide loading message
    productErrorMessageEl.style.display = "none"; // Hide error message

    if (productsToRender && productsToRender.length > 0) {
      productListEl.innerHTML = ""; // Clear current content
      productsToRender.forEach((product) => {
        const productHtml = `
              <div class="product-item card mb-2" data-product-id="${
                product.id
              }">
                <div class="card-body d-flex flex-wrap align-items-center p-3">
                <button type="button" class="btn-close ms-2 remove-product-btn col-md-1 col-sm-12" aria-label="حذف محصول" data-product-id="${
                  product.id
                }"></button>
                  <div class="d-flex align-items-center col-md-7  col-sm-12">
                     <img src="${
                       product.image
                     }" alt="تصویر محصول" width="100" height="100" class="mx-2 rounded">
                     <div>
                        <div class="title fw-bold">${product.name}</div>
                        <div class="description text-muted small">${
                          product.description
                        }</div>
                     </div>
                  </div>
                  <div class="d-flex flex-column align-items-start mx-2 col-md-2  col-sm-12">
                    <span class="product-price fw-bold">${new Intl.NumberFormat(
                      "fa-IR"
                    ).format(product.price)} تومان</span>
                  </div>
                  <div class="d-flex align-items-center mt-2 product-quantity-controls col-md-2  col-sm-12">
                  <button class="bg-transparent border-light-subtle  rounded-circle px-1 py-1 fw-bold d-flex align-items-center justify-content-center plusBtn">
                      <img src="./images/plus-svgrepo-com.svg" alt="" width="15" height="15">
                  </button>
                  <div class="d-inline mx-2"><span class="product-quantity">1</span></div> <span class="ms-2">مورد</span>
                  <button class="bg-transparent border-light-subtle rounded-circle px-1 py-1 fw-bold d-flex align-items-center justify-content-center minusBtn">
                      <img src="./images/minus-svgrepo-com.svg" alt="" width="15" height="15">
                  </button>
                  </div>
                </div>
              </div>
            `;
        productListEl.innerHTML += productHtml; // Append each product
      });

      addQuantityControlListeners();
      addCloseButtonListeners();
      enableOrderControls(); // Enable buttons now that products are rendered
    } else {
      // If no products are returned (empty array, not an error)
      productListEl.innerHTML =
        "<div class='text-center py-5'>محصولی برای نمایش وجود ندارد.</div>";
      // This state might still need other parts to be active depending on requirements.
      // For now, we'll let initializePage handle this case separately from a fetch ERROR.
      // Reverting product list display logic here to only show products or "no products" text.
    }
    console.log("<- Exiting renderProducts");
  }

  // --- NEW: Function to display product fetch error ---
  function displayProductFetchError() {
    console.log("-> Entering displayProductFetchError");
    loadingProductsEl.style.display = "none"; // Hide loading
    productListEl.innerHTML = ""; // Clear any previous product list or text
    productErrorMessageEl.style.display = "block"; // Show the error message
    console.log("<- Product fetch error message displayed.");
  }
  // --- END NEW Function ---

  function renderDeliveryDays(daysToRender) {
    console.log("-> Entering renderDeliveryDays");
    deliveryDaysContainerEl.innerHTML = ""; // Clear current content
    loadingDeliveryDaysEl.style.display = "none"; // Hide loading message

    if (daysToRender && daysToRender.length > 0) {
      const daysHtml = daysToRender
        .map(
          (day) => `
            <button class="delivery-day my-2 bg-transparent border border-dark-subtle rounded-2 p-3">
              ${day.dayOfWeek} <br> ${day.date}
            </button>
          `
        )
        .join("");
      deliveryDaysContainerEl.innerHTML = daysHtml;
      addDeliveryDayEventListeners();
      deliveryDaysContainerEl.style.display = "block"; // Ensure delivery days container is visible
    } else {
      deliveryDaysContainerEl.innerHTML =
        "<div class='text-center py-3'>روز تحویلی در دسترس نیست.</div>";
      deliveryDaysContainerEl.style.display = "block"; // Ensure delivery days container is visible even if empty
    }
    console.log("<- Exiting renderDeliveryDays");
  }

  function renderUserAddress(addressData) {
    console.log("-> Entering renderUserAddress");
    if (!userAddressContainerEl) {
      console.error("User address container element not found!");
      return;
    }
    userAddressContainerEl.innerHTML = ""; // Clear current content

    if (addressData && addressData.fullAddress) {
      const addressHtml = `
                <div class="fw-bold mb-2">آدرس تحویل:</div>
                <p class="mb-0 text-muted small">
                    ${addressData.fullAddress}
                </p>
                <!-- Optional: Add a button/link to change address -->
                <!-- <a href="#" class="btn btn-sm btn-outline-secondary mt-2">تغییر آدرس</a> -->
            `;
      userAddressContainerEl.innerHTML = addressHtml;
      userAddressContainerEl.style.display = "block"; // Ensure address container is visible
      console.log("User address rendered.");
    } else {
      userAddressContainerEl.innerHTML = `
                <div class="fw-bold mb-2">آدرس تحویل:</div>
                <p class="mb-0 text-muted small">
                    آدرسی ثبت نشده است. لطفا در پروفایل کاربری خود آدرس را وارد کنید.
                </p>
                 <a href="#" class="btn btn-sm btn-outline-secondary mt-2">ثبت آدرس</a>
            `;
      userAddressContainerEl.style.display = "block"; // Ensure address container is visible even if no address data
      console.log("No user address data available to render.");
    }
    console.log("<- Exiting renderUserAddress");
  }

  function updatePrices() {
    console.log("-> Entering updatePrices");
    const productItems = productListEl.querySelectorAll(".product-item");
    let calculatedProductTotalPrice = 0;

    productItems.forEach((item) => {
      const quantitySpan = item.querySelector(".product-quantity");
      const priceSpan = item.querySelector(".product-price");

      if (quantitySpan && priceSpan) {
        const quantity = parseInt(quantitySpan.textContent, 10);
        const priceText = priceSpan.textContent;
        const textWithAsciiDigits = persianToAsciiDigits(priceText);
        const cleanedPriceText = textWithAsciiDigits.replace(/\D/g, "");
        const price = parseInt(cleanedPriceText, 10);

        if (!isNaN(quantity) && !isNaN(price)) {
          calculatedProductTotalPrice += price * quantity;
        } else {
          console.warn(`Could not parse quantity or price for item.`);
        }
      } else {
        console.warn(`Quantity or price span not found for item.`);
      }
    });

    // Update display for each cost item
    if (orderTotalPriceEl) {
      orderTotalPriceEl.textContent =
        new Intl.NumberFormat("fa-IR").format(calculatedProductTotalPrice) +
        " تومان";
    } else {
      console.error("Element with id 'order-total-price' not found!");
    }

    if (orderShippingCostEl) {
      orderShippingCostEl.textContent =
        new Intl.NumberFormat("fa-IR").format(shippingCost) + " تومان";
    } else {
      console.error("Element with id 'order-shipping-cost' not found!");
    }

    if (orderTaxCostEl) {
      orderTaxCostEl.textContent =
        new Intl.NumberFormat("fa-IR").format(taxCost) + " تومان";
    } else {
      console.error("Element with id 'order-tax-cost' not found!");
    }

    if (orderDiscountEl) {
      orderDiscountEl.textContent =
        new Intl.NumberFormat("fa-IR").format(appliedDiscount) + " تومان";
    } else {
      console.error("Element with id 'order-discount' not found!");
    }

    // Calculate Subtotal (Products + Shipping + Tax)
    const subtotal = calculatedProductTotalPrice + shippingCost + taxCost;

    // Calculate Final Price (Subtotal - Discount)
    let finalPrice = subtotal - appliedDiscount;
    if (finalPrice < 0) {
      finalPrice = 0;
    }

    if (orderFinalPriceEl) {
      orderFinalPriceEl.textContent = new Intl.NumberFormat("fa-IR").format(
        finalPrice
      );
    } else {
      console.error("Element with id 'order-final-price' not found!");
    }

    // Pay button state logic remains based on products count and final price
    // This logic is mainly for the *active* state, error state is handled by handleNoProductState
    if (productItems.length > 0 && finalPrice > 0) {
      if (payButton) {
        payButton.classList.remove("disabled");
        payButton.style.pointerEvents = "auto";
      }
    } else {
      // If this state is reached NOT through handleNoProductState
      if (payButton) {
        payButton.classList.add("disabled");
        payButton.style.pointerEvents = "none";
      }
    }

    console.log("<- Exiting updatePrices");
  }

  function enableOrderControls() {
    console.log("-> Entering enableOrderControls");
    const plusBtns = productListEl.querySelectorAll(".plusBtn");
    const minusBtns = productListEl.querySelectorAll(".minusBtn");
    plusBtns.forEach((btn) => (btn.disabled = false));
    minusBtns.forEach((btn) => (btn.disabled = false));
    if (discountCodeInputEl) discountCodeInputEl.disabled = false; // Enable discount input
    if (payButton) {
      // Ensure button is enabled if conditions met
      payButton.classList.remove("disabled");
      payButton.style.pointerEvents = "auto";
    }
    paymentOptionItems.forEach((item) => item.classList.remove("disabled")); // Enable payment options
    console.log("<- Order controls enabled.");
  }

  function disableOrderControls() {
    console.log("-> Entering disableOrderControls");
    const plusBtns = productListEl.querySelectorAll(".plusBtn");
    const minusBtns = productListEl.querySelectorAll(".minusBtn");
    plusBtns.forEach((btn) => (btn.disabled = true));
    minusBtns.forEach((btn) => (btn.disabled = true));
    if (discountCodeInputEl) discountCodeInputEl.disabled = true; // Disable discount input
    if (payButton) {
      // Ensure button is disabled
      payButton.classList.add("disabled");
      payButton.style.pointerEvents = "none";
    }
    paymentOptionItems.forEach((item) => item.classList.add("disabled")); // Disable payment options
    console.log("<- Order controls disabled.");
  }

  // --- Modified to handle both "no products" and "product fetch error" states ---
  function handleCriticalState(
    errorMessage = "محصولی برای نمایش وجود ندارد.",
    isError = false
  ) {
    console.log(`-> Entering handleCriticalState (isError: ${isError})`);

    // Reset costs and discount
    appliedDiscount = 0;
    shippingCost = 0;
    taxCost = 0;

    // Update price displays to 0
    updatePrices();

    // Product List Area
    loadingProductsEl.style.display = "none"; // Hide product loading
    productListEl.innerHTML = ""; // Clear product items
    if (isError) {
      productErrorMessageEl.style.display = "block"; // Show fetch error message
      // The text for productErrorMessageEl is already in HTML
      console.log("Displaying product fetch error message.");
    } else {
      productErrorMessageEl.style.display = "none"; // Hide fetch error message
      // Show "no products" message if it's just empty data, though HTML already has this in product-list if empty
      productListEl.innerHTML = `<div class='text-center py-5'>${errorMessage}</div>`;
      console.log("Displaying 'no products' message.");
    }

    // Delivery Time Section
    deliveryDaysCardEl.style.display = "block"; // Show the delivery card
    noProductMessageEl.style.display = "block"; // Show the general error/no-product message
    loadingDeliveryDaysEl.style.display = "none"; // Hide delivery days loading
    deliveryDaysContainerEl.innerHTML = ""; // Clear delivery days content
    deliveryDaysContainerEl.style.display = "none"; // Hide the delivery days container itself

    if (userAddressContainerEl) {
      userAddressContainerEl.innerHTML = ""; // Clear address content
      userAddressContainerEl.style.display = "none"; // Hide the address container itself
    }

    // Order Summary Section
    // Prices are already set to 0 by updatePrices() call above
    disableOrderControls(); // This disables discount input and pay button

    // Payment Methods Section
    // Payment options and pay button disabled by disableOrderControls() call above
    // Ensure final price is 0 (handled by updatePrices)

    console.log("<- Exiting handleCriticalState");
  }

  // --- Event Listeners ---
  // (These remain the same, ensure they don't break when controls are disabled)

  const optionItems = document.querySelectorAll(".option-item");
  optionItems.forEach((item) => {
    item.addEventListener("click", function () {
      // Only react if not disabled
      if (!this.classList.contains("disabled")) {
        optionItems.forEach((opt) => {
          opt.style.backgroundColor = "";
          // Also remove active styling if any
          opt.classList.remove("border-primary"); // Example of removing active border
          opt.classList.add("border-dark-subtle"); // Example of adding default border
        });
        this.style.backgroundColor = "#3B82F6";
        // Add active styling if any
        this.classList.add("border-primary"); // Example of adding active border
        this.classList.remove("border-dark-subtle"); // Example of removing default border
        console.log("Payment option clicked.");
      }
    });
  });

  // Initial selection styling (optional, remains)
  if (optionItems.length > 0) {
    optionItems[0].style.backgroundColor = "#3B82F6";
    optionItems[0].classList.add("border-primary");
    optionItems[0].classList.remove("border-dark-subtle");
  }

  function addDeliveryDayEventListeners() {
    console.log("-> Entering addDeliveryDayEventListeners");
    const deliveryButtons = document.querySelectorAll(".delivery-day");
    deliveryButtons.forEach((button) => {
      button.addEventListener("click", () => {
        deliveryButtons.forEach((btn) => {
          btn.classList.remove("bg-primary", "text-white", "border-0");
          btn.classList.add("bg-transparent", "border", "border-dark-subtle");
        });

        button.classList.remove("bg-transparent", "border-dark-subtle");
        button.classList.add("bg-primary", "text-white", "border-0");
        console.log("Delivery day selected.");
      });
    });
    console.log("<- Delivery day listeners added.");
  }

  // Quantity and Remove button listeners remain the same, but they should only be added
  // if products are successfully rendered. Their actions trigger updatePrices which
  // can handle the state transition to "no products" if the last item is removed.

  function addQuantityControlListeners() {
    console.log("-> Entering addQuantityControlListeners");
    const plusBtns = productListEl.querySelectorAll(".plusBtn");
    const minusBtns = productListEl.querySelectorAll(".minusBtn");

    plusBtns.forEach((button) => {
      button.addEventListener("click", (event) => {
        const quantitySpan = event.target
          .closest(".product-quantity-controls")
          .querySelector(".product-quantity");
        if (!quantitySpan) return;
        let currentQuantity = parseInt(quantitySpan.textContent, 10);
        currentQuantity++;
        quantitySpan.textContent = currentQuantity;
        updatePrices();
      });
    });

    minusBtns.forEach((button) => {
      button.addEventListener("click", (event) => {
        const quantitySpan = event.target
          .closest(".product-quantity-controls")
          .querySelector(".product-quantity");
        if (!quantitySpan) return;
        let currentQuantity = parseInt(quantitySpan.textContent, 10);
        if (currentQuantity > 1) {
          currentQuantity--;
          quantitySpan.textContent = currentQuantity;
          updatePrices();
        }
      });
    });
    console.log("<- Quantity control listeners added.");
  }

  function addCloseButtonListeners() {
    console.log("-> Entering addCloseButtonListeners");
    const removeButtons = productListEl.querySelectorAll(".remove-product-btn");

    removeButtons.forEach((button) => {
      button.addEventListener("click", (event) => {
        const productIdToRemove = event.target.dataset.productId;
        const productItemEl = productListEl.querySelector(
          `.product-item[data-product-id="${productIdToRemove}"]`
        );

        if (productItemEl) {
          productItemEl.remove();
          console.log(`Product with ID ${productIdToRemove} removed.`);
          updatePrices();
          if (productListEl.querySelectorAll(".product-item").length === 0) {
            console.log(
              "Last product removed. Calling handleCriticalState (no products)."
            );
            handleCriticalState("محصولی برای نمایش وجود ندارد."); // Call with no-product message
          }
        }
      });
    });
    console.log("<- Close button listeners added.");
  }

  if (discountCodeInputEl) {
    discountCodeInputEl.addEventListener("change", async (event) => {
      // This listener should only fire if the input is NOT disabled
      if (discountCodeInputEl.disabled) return;

      console.log("-> Discount code input changed.");
      const enteredCode = event.target.value.trim();
      appliedDiscount = 0;

      if (enteredCode) {
        try {
          console.log("Fetching available discount codes...");
          const availableCodes = await fetchDiscountCodes();

          console.log(
            `Checking entered code "${enteredCode}" against available codes:`,
            availableCodes
          );
          const validCode = availableCodes.find(
            (code) => code.code.toUpperCase() === enteredCode.toUpperCase()
          );

          if (validCode) {
            appliedDiscount = validCode.amount;
            console.log(
              `Valid discount code "${enteredCode}" applied. Discount amount: ${appliedDiscount}`
            );
          } else {
            appliedDiscount = 0;
            console.log(
              `Invalid discount code entered: "${enteredCode}". No discount applied.`
            );
          }
        } catch (error) {
          console.error("Error fetching or applying discount code:", error);
          appliedDiscount = 0;
        }
      } else {
        console.log(
          "Discount code input cleared. Applied discount reset to 0."
        );
        appliedDiscount = 0;
      }

      updatePrices();
      console.log("<- Discount code input change listener finished.");
    });
    console.log("Discount code input listener added.");
  } else {
    console.error(
      "Discount code input element with id 'discount-code-input' not found!"
    );
  }

  // --- Initial Data Fetch and Rendering ---

async function initializePage() {
      console.log("-> Initializing page...");
      // Immediately run the no products/error state logic from the start and skip further initialization
      handleCriticalState("خطا در بارگذاری محصولات. لطفا مجدداً تلاش کنید.", true);
      console.log("<- Initializing page finished.");
      return;
  }

  initializePage();
});
