// ... existing variable declarations ...
const discountCodeInputEl = document.getElementById("discount-code-input"); // Get the input field

// ... existing productsData and discountPerItem ...
let appliedDiscount = 0; // New variable to store the applied discount amount

// --- Simulated API Calls ---
// Modify fetchDiscount to return valid codes and amounts
async function fetchDiscountCodes() { // Renamed function
    console.log("-> Fetching discount codes...");
    return new Promise(resolve => {
      setTimeout(() => {
        const data = [ // Simulate a list of valid codes and their amounts
            { code: 'SALE10', amount: 500000 }, // Example fixed amount discount
            { code: 'FREESHIP', amount: 0 } // Example free shipping (if you want to handle that)
            // Add more codes as needed
        ];
        console.log("<- Fetching discount codes resolved with data:", data);
        resolve(data);
      }, 400);
    });
}
// Remove the old fetchDiscount function

// ... rest of fetchProducts and fetchDeliveryDays ...

// --- Update Order Details and Payment ---
function updatePrices() {
    console.log("-> Entering updatePrices");
    const productItems = productListEl.querySelectorAll('.product-item');
    let totalItemsCount = 0;
    let calculatedTotalPrice = 0;
    // calculatedTotalDiscount is no longer needed as a sum,
    // the appliedDiscount is a fixed value.

    productItems.forEach(item => {
        const quantitySpan = item.querySelector('.product-quantity');
        const priceSpan = item.querySelector('.product-price');

        if(quantitySpan && priceSpan) {
            const quantity = parseInt(quantitySpan.textContent, 10);
            const priceText = priceSpan.textContent;
            const textWithAsciiDigits = persianToAsciiDigits(priceText);
            const cleanedPriceText = textWithAsciiDigits.replace(/\D/g, '');
            const price = parseInt(cleanedPriceText, 10);

            if (!isNaN(quantity) && !isNaN(price)) {
                totalItemsCount += quantity;
                calculatedTotalPrice += price * quantity;
                // *** REMOVED: calculatedTotalDiscount += discountPerItem * quantity; ***
                console.log(`Item ID: ${item.dataset.productId || 'N/A'}, Quantity: ${quantity}, Price: ${price}, Item Total: ${price * quantity}`);
            } else {
                 console.warn(`Could not parse quantity or price for item ID: ${item.dataset.productId || 'N/A'}. Quantity text: "${quantitySpan.textContent}", Price text: "${priceSpan.textContent}". Cleaned price text: "${cleanedPriceText}". Parsed Price is NaN: ${isNaN(price)}`);
            }
        } else {
             console.warn(`Quantity or price span not found for item ID: ${item.dataset.productId || 'N/A'}`);
        }
    });

    console.log("Total Calculated Price (before discount):", calculatedTotalPrice);
    console.log("Applied Discount:", appliedDiscount); // Log the applied discount

    // Update the display elements
    if (orderTotalPriceEl) {
        orderTotalPriceEl.textContent = new Intl.NumberFormat("fa-IR").format(calculatedTotalPrice) + " تومان";
    } else {
        console.error("Element with id 'order-total-price' not found!");
    }

    if (orderDiscountEl) {
        // *** FIX: Display the appliedDiscount directly ***
        orderDiscountEl.textContent = new Intl.NumberFormat("fa-IR").format(appliedDiscount) + " تومان";
    } else {
         console.error("Element with id 'order-discount' not found!");
    }

    // *** FIX: Subtract the appliedDiscount from the total price ***
    const finalPrice = calculatedTotalPrice - appliedDiscount;
     if (orderFinalPriceEl) {
        orderFinalPriceEl.textContent = new Intl.NumberFormat("fa-IR").format(finalPrice);
     } else {
         console.error("Element with id 'order-final-price' not found!");
     }

    // ... rest of the function (pay button logic) ...
     if (productItems.length === 0 || calculatedTotalPrice <= 0) { // Pay button disabled if no items or total is 0
          console.log("updatePrices: Condition met for 'no product state' logic.");
          if (payButton) {
              payButton.classList.add('disabled');
              payButton.style.pointerEvents = 'none';
          } else {
               console.error("Pay button not found!");
          }
          // handleNoProductState is called from addCloseButtonListeners or initializePage
      } else {
         console.log("updatePrices: Condition not met for 'no product state' logic.");
         if (payButton) {
             payButton.classList.remove('disabled');
             payButton.style.pointerEvents = 'auto';
         } else {
              console.error("Pay button not found!");
         }
          noProductMessageEl.style.display = 'none';
          deliveryDaysCardEl.style.display = 'block';
      }
     console.log("<- Exiting updatePrices");
}


// --- Handle No Product State ---
function handleNoProductState() {
    console.log("-> Entering handleNoProductState");
    // *** FIX: Reset appliedDiscount when there are no products ***
    appliedDiscount = 0;
    deliveryDaysCardEl.style.display = 'none';
    noProductMessageEl.style.display = 'block';
    loadingDeliveryDaysEl.style.display = 'none';
    deliveryDaysContainerEl.innerHTML = "";
    updatePrices(); // Ensure prices (including appliedDiscount which is now 0) are displayed correctly
    disableOrderControls();
    console.log("<- Exiting handleNoProductState");
}

// ... rest of event listeners ...

// Add event listener for the discount code input field
if (discountCodeInputEl) {
    discountCodeInputEl.addEventListener('change', async (event) => {
        console.log("Discount code input changed.");
        const enteredCode = event.target.value.trim();
        appliedDiscount = 0; // Reset applied discount initially

        if (enteredCode) {
            try {
                 // Fetch available discount codes (simulate)
                const availableCodes = await fetchDiscountCodes();
                 // Find the entered code in the available codes
                const validCode = availableCodes.find(code => code.code.toUpperCase() === enteredCode.toUpperCase());

                if (validCode) {
                    appliedDiscount = validCode.amount;
                    console.log(`Valid discount code "${enteredCode}" applied. Discount amount: ${appliedDiscount}`);
                    // Optionally, show a success message
                } else {
                    console.log(`Invalid discount code entered: "${enteredCode}"`);
                     // Optionally, show an error message to the user
                }
            } catch (error) {
                 console.error("Error fetching or applying discount code:", error);
                 // Optionally, show an error message to the user
            }
        } else {
             console.log("Discount code input cleared.");
        }

        updatePrices(); // Update prices based on the new applied discount
    });
     console.log("Discount code input listener added.");
} else {
    console.error("Discount code input element with id 'discount-code-input' not found!");
}


// --- Initial Data Fetch and Rendering ---
async function initializePage() {
    console.log("-> Initializing page...");
    disableOrderControls();
    // *** FIX: Initialize appliedDiscount to 0 on page load ***
    appliedDiscount = 0;
    updatePrices(); // Sets prices to 0 initially (with 0 applied discount)
    deliveryDaysCardEl.style.display = 'none';
    noProductMessageEl.style.display = 'block';
    loadingDeliveryDaysEl.style.display = 'block';
    const staticHeader = productCardBody.querySelector('.table-container > .d-flex.justify-content-between.border-bottom');
    if(staticHeader) {
        console.warn("Static product header found during initialization. Removing it.");
        staticHeader.remove();
    }

    try {
        productsData = await fetchProducts();
        console.log("Products fetched:", productsData);

        if (productsData && productsData.length > 0) {
            renderProducts(productsData);
            console.log("Products rendered.");

             // Fetch discount codes (optional, only needed if you want to check codes client-side)
             // The main discount logic now depends on the input field,
             // so fetching discountPerItem initially is no longer relevant.
             // If fetchDiscountCodes is used for validation, call it here if needed initially.

            try {
                const deliveryDays = await fetchDeliveryDays();
                renderDeliveryDays(deliveryDays);
                loadingDeliveryDaysEl.style.display = 'none';
                console.log("Delivery days fetched:", deliveryDays);
            } catch (deliveryError) {
                console.error("Could not fetch delivery days:", deliveryError);
                renderDeliveryDays([]);
                loadingDeliveryDaysEl.style.display = 'none';
            }

            deliveryDaysCardEl.style.display = 'block';
            noProductMessageEl.style.display = 'none';
            // updatePrices is called at the end of renderProducts for initial display
            // It will use the appliedDiscount which is currently 0.

        } else {
            console.log("No products fetched or error occurred during fetch.");
            handleNoProductState(); // This will also reset appliedDiscount to 0 and update prices
            productListEl.innerHTML = "<div class='text-center py-5'>محصولی برای نمایش وجود ندارد.</div>";
        }

    } catch (error) {
        console.error("Critical error during page initialization (e.g., product fetch failed):", error);
        const existingHeader = productCardBody.querySelector('.table-container > .d-flex.justify-content-between.border-bottom');
        if(existingHeader) existingHeader.remove();

        productListEl.innerHTML = "<div class='text-center py-5 text-danger'>خطا در بارگذاری محصولات. لطفا مجددا تلاش کنید.</div>";
        loadingProductsEl.style.display = "none";
        handleNoProductState(); // This will also reset appliedDiscount to 0 and update prices
    }
    console.log("<- Initializing page finished.");
}

initializePage();
});
