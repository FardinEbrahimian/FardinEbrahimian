تو این بخش ما در زمان تحویل یک سکشن هنوز محصولی انتخاب نشده است داریم که میخوام فاصله از گوشه هاش دقیقا مثل درگاه پرداخت بشه و زیر اون اون قسمت آدرس که حذف شده بود فقط برگرده در قسمت محصولات هم که خالی هست یک بخش به عنوان هنوز محصولی انتخاب نشده است و بالای آن یک آیکون سبد خالی اضافه بشه و بقیه کد ها به هیچ عنوان تغییر نکنه حالتش

HTML:
<!DOCTYPE html>
<html lang="fa" dir="rtl">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>صفحه پرداخت</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/rastikerdar/vazirmatn@v33.003/css/vazirmatn.css">
  <link rel="stylesheet" href="./style.css">
  <style>
    /* Optional: Add styles for disabled payment options */
    .option-item.disabled {
      opacity: 0.6;
      pointer-events: none;
    }
  </style>
</head>

<body>
  <div class="container py-4">
    <div class="row g-4">
      <div class="col-md-9">
        <div class="card">
          <div class="card-body p-2">
            <div class="table-container">
              <div class="table-body" id="product-list">
                <div class="text-center py-5" id="loading-products">در حال بارگذاری محصولات...</div>
                <!-- Error message container - controlled by JS -->
                <div class="text-center py-5  text-danger" id="product-error-message" style="display: none;">
                    خطا در بارگذاری محصولات. لطفا مجدداً تلاش کنید.
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div class="col-md-3">
        <div class="card mb-4" id="delivery-days-card">
          <div class="py-3 mx-3 border-bottom">
            <svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" fill="#3B82F6" viewBox="0 0 256 256">
              <path d="M216,48V88H40V48a8,8,0,0,1,8-8H208A8,8,0,0,1,216,48Z" opacity="0.2"></path>
              <path
                d="M208,32H184V24a8,8,0,0,0-16,0v8H88V24a8,8,0,0,0-16,0v8H48A16,16,0,0,0,32,48V208a16,16,0,0,0,16,16H208a16,16,0,0,0,16-16V48A16,16,0,0,0,208,32ZM72,48v8a8,8,0,0,0,16,0V48h80v8a8,8,0,0,0,16,0V48h24V80H48V48ZM208,208H48V96H208V208Z">
              </path>
            </svg>
            <span class="card-title h5 me-2 fw-bold">زمان تحویل</span>
          </div>
          <div class="card-body" id="delivery-days-container">
            <div class="text-center py-3" id="loading-delivery-days">در حال بارگذاری روزهای تحویل...</div>
          </div>

          <!-- محل نگهدارنده جدید برای آدرس کاربر -->
          <div class="card-body border-top pt-3" id="user-address-container">
              <!-- آدرس پویا اینجا توسط JavaScript اضافه خواهد شد -->
          </div>
          <!-- پایان محل نگهدارنده آدرس -->

          <!-- Changed alert-info to alert-danger and removed style="display: none;" -->
          <div class="alert alert-danger text-center mb-4" role="alert" id="no-product-message">
            هنوز محصولی انتخاب نشده است.
          </div>
        </div>

        <div class="card card-body mb-4 order-summary" id="order-summary-card">
          <h5 class="card-title pb-3 fw-bold border-bottom">جزئیات سفارش</h5>
          <div class="d-flex justify-content-between">
            <ul class="list-group list-group-flush p-0">
              <li class="list-group-item border-0 px-0 py-2"><span>قیمت کل محصولات</span></li>
              <li class="list-group-item border-0 px-0 py-2"><span>هزینه ارسال</span></li>
              <li class="list-group-item border-0 px-0 py-2"><span>مالیات</span></li>
              <li class="list-group-item border-0 px-0 py-2"><span>تخفیف</span></li>
            </ul>
            <ul class="list-group list-group-flush p-0 text-start">
              <li class="list-group-item border-0 px-0 py-2">
                <span id="order-total-price">0 تومان</span>
              </li>
              <li class="list-group-item border-0 px-0 py-2">
                <span id="order-shipping-cost" class="">0 تومان</span>
              </li>
              <li class="list-group-item border-0 px-0 py-2">
                <span id="order-tax-cost" class="">0 تومان</span>
              </li>
              <li class="list-group-item border-0 px-0 py-2">
                <span id="order-discount" class="text-danger">0 تومان</span>
              </li>
            </ul>
          </div>
          <input class="border border-light-subtle px-3 py-2 mt-4" type="text" placeholder="کد تخفیف خود را وارد کنید"
            id="discount-code-input">
        </div>

        <div class="card mb-4">
          <div class="py-3 mx-3 border-bottom">
            <img src="./images/download 2.svg" alt="" class="ms-2" width="30" height="30">
            <span class="card-title h5 fw-bold">نحوه پرداخت</span>
          </div>
          <div class="card-body" id="payment-options-container">
            <!-- Added class 'option-item' for easy selection -->
            <div class="rounded-2 border border-dark-subtle px-3 py-2 option-item mb-4">
              <img src="./images/9f8f73037fc93b0cb261c73375b91f62e81fa5b210f459.png" alt="" width="25" height="25">
              <span>پرداخت با درگاه بانکی </span>
            </div>
             <!-- Added class 'option-item' for easy selection -->
            <div class="rounded-2 border border-dark-subtle px-3 py-2 option-item">
              <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 49 71" fill="none">
                <path
                  d="M39.7025 26.4303L16.5525 39.7903C13.5839 41.5054 11.4179 44.3292 10.5309 47.6409C9.64395 50.9526 10.1085 54.481 11.8225 57.4503L15.2525 63.3903C15.3479 63.5488 15.4936 63.6708 15.6663 63.7371C15.839 63.8033 16.0289 63.81 16.2059 63.756C16.3828 63.702 16.5366 63.5904 16.6429 63.439C16.7492 63.2876 16.8018 63.105 16.7925 62.9203C16.6331 60.5536 17.1294 58.1888 18.2268 56.0859C19.3241 53.9829 20.98 52.2232 23.0125 51.0003L37.4225 42.6703C40.0551 41.1472 41.9771 38.6434 42.768 35.7066C43.5589 32.7699 43.1542 29.6394 41.6425 27.0003C41.5535 26.8345 41.4325 26.6881 41.2864 26.5696C41.1404 26.451 40.9722 26.3626 40.7917 26.3096C40.6112 26.2565 40.422 26.2399 40.235 26.2606C40.048 26.2813 39.867 26.339 39.7025 26.4303Z"
                  fill="url(#paint0_linear_18_38)" />
                <path
                  d="M46.8025 0.710289C46.7093 0.548742 46.5852 0.407142 46.4372 0.293577C46.2893 0.180011 46.1204 0.0967054 45.9402 0.0484169C45.7601 0.000128463 45.5722 -0.0121964 45.3872 0.0121462C45.2023 0.0364889 45.024 0.0970222 44.8625 0.190289L6.45251 22.3703C3.48999 24.0834 1.32812 26.9018 0.441341 30.207C-0.445436 33.5123 0.0153327 37.0344 1.72251 40.0003L5.15251 46.0003C5.24793 46.1588 5.39356 46.2808 5.56628 46.3471C5.739 46.4134 5.92891 46.42 6.10585 46.366C6.28278 46.312 6.4366 46.2004 6.54289 46.049C6.64918 45.8976 6.70185 45.715 6.69252 45.5303C6.53127 43.162 7.02663 40.7951 8.12406 38.6902C9.2215 36.5853 10.8785 34.824 12.9125 33.6003L42.5925 16.4603C43.9049 15.7043 45.0551 14.6967 45.9773 13.4953C46.8995 12.2939 47.5755 10.9223 47.9666 9.45913C48.3577 7.99597 48.4562 6.47 48.2565 4.96869C48.0567 3.46739 47.5626 2.02027 46.8025 0.710289Z"
                  fill="url(#paint1_linear_18_38)" />
                <path
                  d="M26.6325 57.2303C25.3687 57.2303 24.1332 57.6051 23.0824 58.3072C22.0316 59.0093 21.2126 60.0073 20.7289 61.1749C20.2453 62.3426 20.1187 63.6274 20.3653 64.8669C20.6119 66.1065 21.2204 67.245 22.1141 68.1387C23.0078 69.0324 24.1463 69.6409 25.3859 69.8875C26.6254 70.1341 27.9102 70.0075 29.0779 69.5239C30.2455 69.0402 31.2435 68.2212 31.9456 67.1704C32.6477 66.1196 33.0225 64.8841 33.0225 63.6203C33.0225 61.9256 32.3493 60.3002 31.1509 59.1019C29.9526 57.9035 28.3272 57.2303 26.6325 57.2303Z"
                  fill="url(#paint2_linear_18_38)" />
                <defs>
                  <linearGradient id="paint0_linear_18_38" x1="1.83251" y1="5.53029" x2="49.6825" y2="76.8103"
                    gradientUnits="userSpaceOnUse">
                    <stop offset="0.3" stop-color="#21409A" />
                    <stop offset="0.66" stop-color="#D11776" />
                  </linearGradient>
                  <linearGradient id="paint1_linear_18_38" x1="10.2325" y1="-0.109711" x2="58.0825" y2="71.1603"
                    gradientUnits="userSpaceOnUse">
                    <stop offset="0.3" stop-color="#21409A" />
                    <stop offset="0.66" stop-color="#D11776" />
                  </linearGradient>
                  <linearGradient id="paint2_linear_18_38" x1="-7.94747" y1="12.1003" x2="39.9025" y2="83.3703"
                    gradientUnits="userSpaceOnUse">
                    <stop offset="0.3" stop-color="#21409A" />
                    <stop offset="0.66" stop-color="#D11776" />
                  </linearGradient>
                </defs>
              </svg>
              <span>پرداخت اقساطی با رفاه پرداخت زاریس</span>
            </div>
          </div>

          <div class="card-body text-center">
            <div class="card-title h5 pb-3 m-0 border-bottom text-end fw-bold">مبلغ قابل پرداخت</div>
            <div class="amount my-4">
              <span id="order-final-price" class="fw-bold h2">0</span>
              <span class="small">تومان</span>
            </div>
            <a href="#" class="btn btn-success mb-3" id="pay-button">پرداخت و تکمیل سفارش</a>
            <small class="d-block text-muted">
              در صورت منتقل نشدن به درگاه پرداخت VPN خود را غیرفعال و صفحه را رفرش کنید.
            </small>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.min.js"></script>
  <script src="./error.js"></script>
</body>

</html>

J's:
/*کد ها با api شبی سازی شده*/
document.addEventListener("DOMContentLoaded", () => {
  const productListEl = document.getElementById("product-list");
  const loadingProductsEl = document.getElementById("loading-products");
  // --- NEW: Get reference to the product error message element ---
  const productErrorMessageEl = document.getElementById(
    "product-error-message"
  );

  const orderTotalPriceEl = document.getElementById("order-total-price");
  const orderShippingCostEl = document.getElementById("order-shipping-cost");
  const orderTaxCostEl = document.getElementById("order-tax-cost");
  const orderDiscountEl = document.getElementById("order-discount");
  const orderFinalPriceEl = document.getElementById("order-final-price");

  const deliveryDaysCardEl = document.getElementById("delivery-days-card");
  const deliveryDaysContainerEl = document.getElementById(
    "delivery-days-container"
  );
  const loadingDeliveryDaysEl = document.getElementById(
    "loading-delivery-days"
  );
  const noProductMessageEl = document.getElementById("no-product-message"); // This will now serve as a general error message

  const payButton = document.getElementById("pay-button");
  const productCardBody = document.querySelector(".col-md-9 .card-body");
  const userAddressContainerEl = document.getElementById(
    "user-address-container"
  );
  const discountCodeInputEl = document.getElementById("discount-code-input");
  // --- NEW: Get reference to payment option items ---
  const paymentOptionItems = document.querySelectorAll(".option-item");

  let productsData = [];
  let appliedDiscount = 0;
  let shippingCost = 0;
  let taxCost = 0;

  const persianToAsciiDigits = (text) => {
    const persianDigits = ["۰", "۱", "۲", "۳", "۴", "۵", "۶", "۷", "۸", "۹"];
    const asciiDigits = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"];
    let result = "";
    if (text === null || text === undefined) {
      return "";
    }
    text = String(text);

    for (let i = 0; i < text.length; i++) {
      const char = text[i];
      const persianIndex = persianDigits.indexOf(char);
      if (persianIndex > -1) {
        result += asciiDigits[persianIndex];
      } else {
        result += char;
      }
    }
    return result;
  };

  // --- Simulated API Calls (These remain the same for now, simulation still needed) ---

  async function fetchProducts() {
    console.log("-> Fetching products...");
    return new Promise((resolve, reject) => {
      // Added reject
      setTimeout(() => {
        const data = [
          {
            id: 1,
            name: "اسپرسو ساز فیلیپس اتوماتیک سایکو",
            description: "گارانتی اصالت و سلامت فیزیکی کالا",
            price: 17800000,
            image:
              "./images/و-قیمت-اسپرسو-ساز-فیلیپس-اتوماتیک-سایکو-مدل-Saeco-SM878500-Xelsis-Deluxe-3.webp",
          },
          {
            id: 2,
            name: "محصول نمونه دیگر",
            description: "توضیحات محصول دوم برای تست لیست",
            price: 5000000,
            image: "https://via.placeholder.com/100",
          },
        ];
        // const data = []; // Uncomment this line to simulate no products
        // reject(new Error("Failed to fetch products")); // Uncomment this line to simulate a fetch error
        console.log("<- Fetching products resolved with data:", data);
        resolve(data);
      }, 700);
    });
  }

  async function fetchDiscountCodes() {
    console.log("-> Fetching discount codes...");
    return new Promise((resolve) => {
      setTimeout(() => {
        const data = [
          { code: "SALE10", amount: 500000 },
          { code: "ZARISFREE", amount: 19000 },
        ];
        console.log("<- Fetching discount codes resolved with data:", data);
        resolve(data);
      }, 400);
    });
  }

  async function fetchDeliveryDays() {
    console.log("-> Fetching delivery days...");
    return new Promise((resolve, reject) => {
      // Added reject
      setTimeout(() => {
        const data = [
          { dayOfWeek: "شنبه", date: "۷ بهمن" },
          { dayOfWeek: "یکشنبه", date: "۸ بهمن" },
          { dayOfWeek: "دوشنبه", date: "۹ بهمن" },
        ];
        // const data = []; // Uncomment this line to simulate no delivery days fetched
        // reject(new Error("Failed to fetch delivery days")); // Uncomment to simulate error
        console.log("<- Fetching delivery days resolved with data:", data);
        resolve(data);
      }, 500);
    });
  }

  async function fetchUserAddress() {
    console.log("-> Fetching user address...");
    return new Promise((resolve, reject) => {
      // Added reject
      setTimeout(() => {
        const addressData = {
          street: "خیابان انقلاب، کوچه دانشگاه",
          building: "پلاک ۱۲",
          unit: "واحد ۳",
          city: "تهران",
          postalCode: "۱۲۳۴۵۶۷۸۹۰",
          fullAddress:
            "تهران، خیابان انقلاب، کوچه دانشگاه، پلاک ۱۲، واحد ۳، کد پستی: ۱۲۳۴۵۶۷۸۹۰",
        };
        // const addressData = null; // Uncomment to simulate no address found
        // reject(new Error("Failed to fetch address")); // Uncomment to simulate error
        console.log(
          "<- Fetching user address resolved with data:",
          addressData
        );
        resolve(addressData);
      }, 600);
    });
  }

  async function fetchShippingCost() {
    console.log("-> Fetching shipping cost...");
    return new Promise((resolve, reject) => {
      // Added reject
      setTimeout(() => {
        const cost = 19000;
        // reject(new Error("Failed to fetch shipping cost")); // Uncomment to simulate error
        console.log("<- Fetching shipping cost resolved with data:", cost);
        resolve(cost);
      }, 450);
    });
  }

  async function fetchTaxCost() {
    console.log("-> Fetching tax cost...");
    return new Promise((resolve, reject) => {
      // Added reject
      setTimeout(() => {
        const cost = 50000;
        // reject(new Error("Failed to fetch tax cost")); // Uncomment to simulate error
        console.log("<- Fetching tax cost resolved with data:", cost);
        resolve(cost);
      }, 350);
    });
  }
  // --- End Simulated API Calls ---

  // --- Rendering Functions ---

  function renderProducts(productsToRender) {
    console.log("-> Entering renderProducts");
    loadingProductsEl.style.display = "none"; // Hide loading message
    productErrorMessageEl.style.display = "none"; // Hide error message

    if (productsToRender && productsToRender.length > 0) {
      productListEl.innerHTML = ""; // Clear current content
      productsToRender.forEach((product) => {
        const productHtml = `
              <div class="product-item card mb-2" data-product-id="${
                product.id
              }">
                <div class="card-body d-flex flex-wrap align-items-center p-3">
                <button type="button" class="btn-close ms-2 remove-product-btn col-md-1 col-sm-12" aria-label="حذف محصول" data-product-id="${
                  product.id
                }"></button>
                  <div class="d-flex align-items-center col-md-7  col-sm-12">
                     <img src="${
                       product.image
                     }" alt="تصویر محصول" width="100" height="100" class="mx-2 rounded">
                     <div>
                        <div class="title fw-bold">${product.name}</div>
                        <div class="description text-muted small">${
                          product.description
                        }</div>
                     </div>
                  </div>
                  <div class="d-flex flex-column align-items-start mx-2 col-md-2  col-sm-12">
                    <span class="product-price fw-bold">${new Intl.NumberFormat(
                      "fa-IR"
                    ).format(product.price)} تومان</span>
                  </div>
                  <div class="d-flex align-items-center mt-2 product-quantity-controls col-md-2  col-sm-12">
                  <button class="bg-transparent border-light-subtle  rounded-circle px-1 py-1 fw-bold d-flex align-items-center justify-content-center plusBtn">
                      <img src="./images/plus-svgrepo-com.svg" alt="" width="15" height="15">
                  </button>
                  <div class="d-inline mx-2"><span class="product-quantity">1</span></div> <span class="ms-2">مورد</span>
                  <button class="bg-transparent border-light-subtle rounded-circle px-1 py-1 fw-bold d-flex align-items-center justify-content-center minusBtn">
                      <img src="./images/minus-svgrepo-com.svg" alt="" width="15" height="15">
                  </button>
                  </div>
                </div>
              </div>
            `;
        productListEl.innerHTML += productHtml; // Append each product
      });

      addQuantityControlListeners();
      addCloseButtonListeners();
      enableOrderControls(); // Enable buttons now that products are rendered
    } else {
      // If no products are returned (empty array, not an error)
      productListEl.innerHTML =
        "<div class='text-center py-5'>محصولی برای نمایش وجود ندارد.</div>";
      // This state might still need other parts to be active depending on requirements.
      // For now, we'll let initializePage handle this case separately from a fetch ERROR.
      // Reverting product list display logic here to only show products or "no products" text.
    }
    console.log("<- Exiting renderProducts");
  }

  // --- NEW: Function to display product fetch error ---
  function displayProductFetchError() {
    console.log("-> Entering displayProductFetchError");
    loadingProductsEl.style.display = "none"; // Hide loading
    productListEl.innerHTML = ""; // Clear any previous product list or text
    productErrorMessageEl.style.display = "block"; // Show the error message
    console.log("<- Product fetch error message displayed.");
  }
  // --- END NEW Function ---

  function renderDeliveryDays(daysToRender) {
    console.log("-> Entering renderDeliveryDays");
    deliveryDaysContainerEl.innerHTML = ""; // Clear current content
    loadingDeliveryDaysEl.style.display = "none"; // Hide loading message

    if (daysToRender && daysToRender.length > 0) {
      const daysHtml = daysToRender
        .map(
          (day) => `
            <button class="delivery-day my-2 bg-transparent border border-dark-subtle rounded-2 p-3">
              ${day.dayOfWeek} <br> ${day.date}
            </button>
          `
        )
        .join("");
      deliveryDaysContainerEl.innerHTML = daysHtml;
      addDeliveryDayEventListeners();
      deliveryDaysContainerEl.style.display = "block"; // Ensure delivery days container is visible
    } else {
      deliveryDaysContainerEl.innerHTML =
        "<div class='text-center py-3'>روز تحویلی در دسترس نیست.</div>";
      deliveryDaysContainerEl.style.display = "block"; // Ensure delivery days container is visible even if empty
    }
    console.log("<- Exiting renderDeliveryDays");
  }

  function renderUserAddress(addressData) {
    console.log("-> Entering renderUserAddress");
    if (!userAddressContainerEl) {
      console.error("User address container element not found!");
      return;
    }
    userAddressContainerEl.innerHTML = ""; // Clear current content

    if (addressData && addressData.fullAddress) {
      const addressHtml = `
                <div class="fw-bold mb-2">آدرس تحویل:</div>
                <p class="mb-0 text-muted small">
                    ${addressData.fullAddress}
                </p>
                <!-- Optional: Add a button/link to change address -->
                <!-- <a href="#" class="btn btn-sm btn-outline-secondary mt-2">تغییر آدرس</a> -->
            `;
      userAddressContainerEl.innerHTML = addressHtml;
      userAddressContainerEl.style.display = "block"; // Ensure address container is visible
      console.log("User address rendered.");
    } else {
      userAddressContainerEl.innerHTML = `
                <div class="fw-bold mb-2">آدرس تحویل:</div>
                <p class="mb-0 text-muted small">
                    آدرسی ثبت نشده است. لطفا در پروفایل کاربری خود آدرس را وارد کنید.
                </p>
                 <a href="#" class="btn btn-sm btn-outline-secondary mt-2">ثبت آدرس</a>
            `;
      userAddressContainerEl.style.display = "block"; // Ensure address container is visible even if no address data
      console.log("No user address data available to render.");
    }
    console.log("<- Exiting renderUserAddress");
  }

  function updatePrices() {
    console.log("-> Entering updatePrices");
    const productItems = productListEl.querySelectorAll(".product-item");
    let calculatedProductTotalPrice = 0;

    productItems.forEach((item) => {
      const quantitySpan = item.querySelector(".product-quantity");
      const priceSpan = item.querySelector(".product-price");

      if (quantitySpan && priceSpan) {
        const quantity = parseInt(quantitySpan.textContent, 10);
        const priceText = priceSpan.textContent;
        const textWithAsciiDigits = persianToAsciiDigits(priceText);
        const cleanedPriceText = textWithAsciiDigits.replace(/\D/g, "");
        const price = parseInt(cleanedPriceText, 10);

        if (!isNaN(quantity) && !isNaN(price)) {
          calculatedProductTotalPrice += price * quantity;
        } else {
          console.warn(`Could not parse quantity or price for item.`);
        }
      } else {
        console.warn(`Quantity or price span not found for item.`);
      }
    });

    // Update display for each cost item
    if (orderTotalPriceEl) {
      orderTotalPriceEl.textContent =
        new Intl.NumberFormat("fa-IR").format(calculatedProductTotalPrice) +
        " تومان";
    } else {
      console.error("Element with id 'order-total-price' not found!");
    }

    if (orderShippingCostEl) {
      orderShippingCostEl.textContent =
        new Intl.NumberFormat("fa-IR").format(shippingCost) + " تومان";
    } else {
      console.error("Element with id 'order-shipping-cost' not found!");
    }

    if (orderTaxCostEl) {
      orderTaxCostEl.textContent =
        new Intl.NumberFormat("fa-IR").format(taxCost) + " تومان";
    } else {
      console.error("Element with id 'order-tax-cost' not found!");
    }

    if (orderDiscountEl) {
      orderDiscountEl.textContent =
        new Intl.NumberFormat("fa-IR").format(appliedDiscount) + " تومان";
    } else {
      console.error("Element with id 'order-discount' not found!");
    }

    // Calculate Subtotal (Products + Shipping + Tax)
    const subtotal = calculatedProductTotalPrice + shippingCost + taxCost;

    // Calculate Final Price (Subtotal - Discount)
    let finalPrice = subtotal - appliedDiscount;
    if (finalPrice < 0) {
      finalPrice = 0;
    }

    if (orderFinalPriceEl) {
      orderFinalPriceEl.textContent = new Intl.NumberFormat("fa-IR").format(
        finalPrice
      );
    } else {
      console.error("Element with id 'order-final-price' not found!");
    }

    // Pay button state logic remains based on products count and final price
    // This logic is mainly for the *active* state, error state is handled by handleNoProductState
    if (productItems.length > 0 && finalPrice > 0) {
      if (payButton) {
        payButton.classList.remove("disabled");
        payButton.style.pointerEvents = "auto";
      }
    } else {
      // If this state is reached NOT through handleNoProductState
      if (payButton) {
        payButton.classList.add("disabled");
        payButton.style.pointerEvents = "none";
      }
    }

    console.log("<- Exiting updatePrices");
  }

  function enableOrderControls() {
    console.log("-> Entering enableOrderControls");
    const plusBtns = productListEl.querySelectorAll(".plusBtn");
    const minusBtns = productListEl.querySelectorAll(".minusBtn");
    plusBtns.forEach((btn) => (btn.disabled = false));
    minusBtns.forEach((btn) => (btn.disabled = false));
    if (discountCodeInputEl) discountCodeInputEl.disabled = false; // Enable discount input
    if (payButton) {
      // Ensure button is enabled if conditions met
      payButton.classList.remove("disabled");
      payButton.style.pointerEvents = "auto";
    }
    paymentOptionItems.forEach((item) => item.classList.remove("disabled")); // Enable payment options
    console.log("<- Order controls enabled.");
  }

  function disableOrderControls() {
    console.log("-> Entering disableOrderControls");
    const plusBtns = productListEl.querySelectorAll(".plusBtn");
    const minusBtns = productListEl.querySelectorAll(".minusBtn");
    plusBtns.forEach((btn) => (btn.disabled = true));
    minusBtns.forEach((btn) => (btn.disabled = true));
    if (discountCodeInputEl) discountCodeInputEl.disabled = true; // Disable discount input
    if (payButton) {
      // Ensure button is disabled
      payButton.classList.add("disabled");
      payButton.style.pointerEvents = "none";
    }
    paymentOptionItems.forEach((item) => item.classList.add("disabled")); // Disable payment options
    console.log("<- Order controls disabled.");
  }

  // --- Modified to handle both "no products" and "product fetch error" states ---
  function handleCriticalState(
    errorMessage = "محصولی برای نمایش وجود ندارد.",
    isError = false
  ) {
    console.log(`-> Entering handleCriticalState (isError: ${isError})`);

    // Reset costs and discount
    appliedDiscount = 0;
    shippingCost = 0;
    taxCost = 0;

    // Update price displays to 0
    updatePrices();

    // Product List Area
    loadingProductsEl.style.display = "none"; // Hide product loading
    productListEl.innerHTML = ""; // Clear product items
    if (isError) {
      productErrorMessageEl.style.display = "block"; // Show fetch error message
      // The text for productErrorMessageEl is already in HTML
      console.log("Displaying product fetch error message.");
    } else {
      productErrorMessageEl.style.display = "none"; // Hide fetch error message
      // Show "no products" message if it's just empty data, though HTML already has this in product-list if empty
      productListEl.innerHTML = `<div class='text-center py-5'>${errorMessage}</div>`;
      console.log("Displaying 'no products' message.");
    }

    // Delivery Time Section
    deliveryDaysCardEl.style.display = "block"; // Show the delivery card
    noProductMessageEl.style.display = "block"; // Show the general error/no-product message
    loadingDeliveryDaysEl.style.display = "none"; // Hide delivery days loading
    deliveryDaysContainerEl.innerHTML = ""; // Clear delivery days content
    deliveryDaysContainerEl.style.display = "none"; // Hide the delivery days container itself

    if (userAddressContainerEl) {
      userAddressContainerEl.innerHTML = ""; // Clear address content
      userAddressContainerEl.style.display = "none"; // Hide the address container itself
    }

    // Order Summary Section
    // Prices are already set to 0 by updatePrices() call above
    disableOrderControls(); // This disables discount input and pay button

    // Payment Methods Section
    // Payment options and pay button disabled by disableOrderControls() call above
    // Ensure final price is 0 (handled by updatePrices)

    console.log("<- Exiting handleCriticalState");
  }

  // --- Event Listeners ---
  // (These remain the same, ensure they don't break when controls are disabled)

  const optionItems = document.querySelectorAll(".option-item");
  optionItems.forEach((item) => {
    item.addEventListener("click", function () {
      // Only react if not disabled
      if (!this.classList.contains("disabled")) {
        optionItems.forEach((opt) => {
          opt.style.backgroundColor = "";
          // Also remove active styling if any
          opt.classList.remove("border-primary"); // Example of removing active border
          opt.classList.add("border-dark-subtle"); // Example of adding default border
        });
        this.style.backgroundColor = "#3B82F6";
        // Add active styling if any
        this.classList.add("border-primary"); // Example of adding active border
        this.classList.remove("border-dark-subtle"); // Example of removing default border
        console.log("Payment option clicked.");
      }
    });
  });

  // Initial selection styling (optional, remains)
  if (optionItems.length > 0) {
    optionItems[0].style.backgroundColor = "#3B82F6";
    optionItems[0].classList.add("border-primary");
    optionItems[0].classList.remove("border-dark-subtle");
  }

  function addDeliveryDayEventListeners() {
    console.log("-> Entering addDeliveryDayEventListeners");
    const deliveryButtons = document.querySelectorAll(".delivery-day");
    deliveryButtons.forEach((button) => {
      button.addEventListener("click", () => {
        deliveryButtons.forEach((btn) => {
          btn.classList.remove("bg-primary", "text-white", "border-0");
          btn.classList.add("bg-transparent", "border", "border-dark-subtle");
        });

        button.classList.remove("bg-transparent", "border-dark-subtle");
        button.classList.add("bg-primary", "text-white", "border-0");
        console.log("Delivery day selected.");
      });
    });
    console.log("<- Delivery day listeners added.");
  }

  // Quantity and Remove button listeners remain the same, but they should only be added
  // if products are successfully rendered. Their actions trigger updatePrices which
  // can handle the state transition to "no products" if the last item is removed.

  function addQuantityControlListeners() {
    console.log("-> Entering addQuantityControlListeners");
    const plusBtns = productListEl.querySelectorAll(".plusBtn");
    const minusBtns = productListEl.querySelectorAll(".minusBtn");

    plusBtns.forEach((button) => {
      button.addEventListener("click", (event) => {
        const quantitySpan = event.target
          .closest(".product-quantity-controls")
          .querySelector(".product-quantity");
        if (!quantitySpan) return;
        let currentQuantity = parseInt(quantitySpan.textContent, 10);
        currentQuantity++;
        quantitySpan.textContent = currentQuantity;
        updatePrices();
      });
    });

    minusBtns.forEach((button) => {
      button.addEventListener("click", (event) => {
        const quantitySpan = event.target
          .closest(".product-quantity-controls")
          .querySelector(".product-quantity");
        if (!quantitySpan) return;
        let currentQuantity = parseInt(quantitySpan.textContent, 10);
        if (currentQuantity > 1) {
          currentQuantity--;
          quantitySpan.textContent = currentQuantity;
          updatePrices();
        }
      });
    });
    console.log("<- Quantity control listeners added.");
  }

  function addCloseButtonListeners() {
    console.log("-> Entering addCloseButtonListeners");
    const removeButtons = productListEl.querySelectorAll(".remove-product-btn");

    removeButtons.forEach((button) => {
      button.addEventListener("click", (event) => {
        const productIdToRemove = event.target.dataset.productId;
        const productItemEl = productListEl.querySelector(
          `.product-item[data-product-id="${productIdToRemove}"]`
        );

        if (productItemEl) {
          productItemEl.remove();
          console.log(`Product with ID ${productIdToRemove} removed.`);
          updatePrices();
          if (productListEl.querySelectorAll(".product-item").length === 0) {
            console.log(
              "Last product removed. Calling handleCriticalState (no products)."
            );
            handleCriticalState("محصولی برای نمایش وجود ندارد."); // Call with no-product message
          }
        }
      });
    });
    console.log("<- Close button listeners added.");
  }

  if (discountCodeInputEl) {
    discountCodeInputEl.addEventListener("change", async (event) => {
      // This listener should only fire if the input is NOT disabled
      if (discountCodeInputEl.disabled) return;

      console.log("-> Discount code input changed.");
      const enteredCode = event.target.value.trim();
      appliedDiscount = 0;

      if (enteredCode) {
        try {
          console.log("Fetching available discount codes...");
          const availableCodes = await fetchDiscountCodes();

          console.log(
            `Checking entered code "${enteredCode}" against available codes:`,
            availableCodes
          );
          const validCode = availableCodes.find(
            (code) => code.code.toUpperCase() === enteredCode.toUpperCase()
          );

          if (validCode) {
            appliedDiscount = validCode.amount;
            console.log(
              `Valid discount code "${enteredCode}" applied. Discount amount: ${appliedDiscount}`
            );
          } else {
            appliedDiscount = 0;
            console.log(
              `Invalid discount code entered: "${enteredCode}". No discount applied.`
            );
          }
        } catch (error) {
          console.error("Error fetching or applying discount code:", error);
          appliedDiscount = 0;
        }
      } else {
        console.log(
          "Discount code input cleared. Applied discount reset to 0."
        );
        appliedDiscount = 0;
      }

      updatePrices();
      console.log("<- Discount code input change listener finished.");
    });
    console.log("Discount code input listener added.");
  } else {
    console.error(
      "Discount code input element with id 'discount-code-input' not found!"
    );
  }

  // --- Initial Data Fetch and Rendering ---

async function initializePage() {
      console.log("-> Initializing page...");
      // Immediately run the no products/error state logic from the start and skip further initialization
      handleCriticalState("خطا در بارگذاری محصولات. لطفا مجدداً تلاش کنید.", true);
      console.log("<- Initializing page finished.");
      return;
  }

  initializePage();
});