document.addEventListener("DOMContentLoaded", () => {
  const productListEl = document.getElementById("product-list");
  const loadingProductsEl = document.getElementById("loading-products");
  // orderQuantityEl دیگر در بخش جزئیات سفارش نیست، حذف شده است.
  const orderTotalPriceEl = document.getElementById("order-total-price");
  const orderDiscountEl = document.getElementById("order-discount");
  const orderFinalPriceEl = document.getElementById("order-final-price");
  const deliveryDaysCardEl = document.getElementById("delivery-days-card");
  const deliveryDaysContainerEl = document.getElementById("delivery-days-container");
  const loadingDeliveryDaysEl = document.getElementById("loading-delivery-days");
  const noProductMessageEl = document.getElementById("no-product-message");
  // plusBtn و minusBtn دیگر با ID در این سطح وجود ندارند، حذف شده‌اند.
  const payButton = document.getElementById("pay-button");

  let products = [];
  let discountPerItem = 0;
  // currentQuantity اکنون برای محصول اول مدیریت می‌شود
  // let currentQuantity = 0; // Initialized in renderProducts based on product availability
  let unitPrice = 0; // Will be set based on the first product (assuming one product for simplicity)

  // --- Simulated API Calls ---
  // NOTE: Replace these URLs with your actual API endpoints

  async function fetchProducts() {
    // Simulate fetching product data from an API
    return new Promise(resolve => {
      setTimeout(() => {
        // Example data (can be an empty array to test the no-product scenario)
        const data = [
          {
            id: 1,
            name: "اسپرسو ساز فیلیپس اتوماتیک سایکو",
            description: "گارانتی اصالت و سلامت فیزیکی کالا",
            price: 17800000,
            image: "./images/و-قیمت-اسپرسو-ساز-فیلیپس-اتوماتیک-سایکو-مدل-Saeco-SM878500-Xelsis-Deluxe-3.webp"
          }
        ];
        // Uncomment the line below to simulate no products
        // const data = [];
        resolve(data);
      }, 500); // Simulate network delay
    });
  }

  async function fetchDiscount() {
    // Simulate fetching discount data from an API
    return new Promise(resolve => {
      setTimeout(() => {
        const data = { discountPerItem: 280000 };
        resolve(data);
      }, 300); // Simulate network delay
    });
  }

  async function fetchDeliveryDays() {
    // Simulate fetching delivery days data from an API
    return new Promise(resolve => {
      setTimeout(() => {
        // Example data (can be an empty array to test the no-delivery-days scenario when products exist)
        const data = [
          { dayOfWeek: "شنبه", date: "۷ بهمن" },
          { dayOfWeek: "یکشنبه", date: "۸ بهمن" },
          { dayOfWeek: "دوشنبه", date: "۹ بهمن" }
        ];
        // Uncomment the line below to simulate no delivery days
        // const data = [];
        resolve(data);
      }, 400); // Simulate network delay
    });
  }

  // --- Rendering Functions ---

  function renderProducts(productsToRender) {
    productListEl.innerHTML = ""; // Clear current content
    loadingProductsEl.style.display = "none"; // Hide loading message

    if (productsToRender && productsToRender.length > 0) {
        // Assuming only one product for simplicity as per original structure
      const product = productsToRender[0];
      const productHtml = `
        <div class="table-row">
          <div class="table-cell mt-3">
            <div class="d-flex justify-content-between align-items-center product-item">
              <div class="d-flex align-items-center flex-wrap">
                <img src="${product.image}" alt="تصویر محصول" width="150" height="150">
                <div class="me-4">
                  <div class="title">${product.name}</div>
                  <div class="description">${product.description}</div>
                </div>
              </div>
              <div class="d-flex flex-column align-items-end">
                <span>${new Intl.NumberFormat("fa-IR").format(product.price)} تومان</span>
                 <div class="d-flex align-items-center mt-2 product-quantity-controls">
                  <button class="bg-transparent border border-danger-subtle rounded-circle px-2 minusBtn">-</button>
                  <div class="d-inline mx-2"><span class="product-quantity">1</span> مورد</div>
                  <button class="bg-transparent border border-danger-subtle rounded-circle px-2 plusBtn">+</button>
                </div>
              </div>
            </div>
          </div>
        </div>
      `;
      productListEl.innerHTML = productHtml; // Set product HTML

      unitPrice = product.price;
      // currentQuantity will be read from the span element
       enableOrderControls();
       addQuantityControlListeners(); // Add listeners to the new buttons
    } else {
      productListEl.innerHTML = "<div class='text-center py-5'>محصولی برای نمایش وجود ندارد.</div>";
      unitPrice = 0;
      // currentQuantity will be 0 as the span won't exist or will show 0
      disableOrderControls();
    }
     updatePrices(); // Update details based on loaded products and initial quantity
  }

  function renderDeliveryDays(daysToRender) {
     deliveryDaysContainerEl.innerHTML = ""; // Clear current content
     loadingDeliveryDaysEl.style.display = "none"; // Hide loading message


    if (daysToRender && daysToRender.length > 0) {
      const daysHtml = daysToRender.map(day => `
        <button class="delivery-day my-2 bg-transparent border border-dark-subtle rounded-2 p-3">
          ${day.dayOfWeek} <br> ${day.date}
        </button>
      `).join('');
      deliveryDaysContainerEl.innerHTML = daysHtml;
       addDeliveryDayEventListeners(); // Add event listeners to new buttons
    } else {
      deliveryDaysContainerEl.innerHTML = "<div class='text-center py-3'>روز تحویلی در دسترس نیست.</div>";
    }
  }

  // --- Update Order Details and Payment ---

  function updatePrices() {
      // Get current quantity from the product item span
      const quantitySpan = productListEl.querySelector('.product-quantity');
      const currentQuantity = quantitySpan ? parseInt(quantitySpan.textContent, 10) : 0;

    const totalPrice = unitPrice * currentQuantity;
    const totalDiscount = discountPerItem * currentQuantity;
    const finalPrice = totalPrice - totalDiscount; // Assuming no delivery cost added here for simplicity based on original code

    // orderQuantityEl is removed from order summary, only update other fields
    orderTotalPriceEl.textContent = new Intl.NumberFormat("fa-IR").format(totalPrice) + " تومان";
    orderDiscountEl.textContent = new Intl.NumberFormat("fa-IR").format(totalDiscount) + " تومان";
    orderFinalPriceEl.textContent = new Intl.NumberFormat("fa-IR").format(finalPrice);

    // Disable pay button if quantity is 0
    if (currentQuantity === 0) {
      payButton.classList.add('disabled');
      payButton.style.pointerEvents = 'none'; // Prevent click events
    } else {
       payButton.classList.remove('disabled');
       payButton.style.pointerEvents = 'auto';
    }
  }

   // --- Control Button States ---
  function enableOrderControls() {
      // Enable the buttons within the rendered product item
      const plusBtn = productListEl.querySelector('.plusBtn');
      const minusBtn = productListEl.querySelector('.minusBtn');
      if(plusBtn) plusBtn.disabled = false;
      if(minusBtn) minusBtn.disabled = false;
  }

  function disableOrderControls() {
       // Disable the buttons within the rendered product item
       const plusBtn = productListEl.querySelector('.plusBtn');
       const minusBtn = productListEl.querySelector('.minusBtn');
       if(plusBtn) plusBtn.disabled = true;
       if(minusBtn) minusBtn.disabled = true;
  }


  // --- Event Listeners ---

   // Payment Option Styling (remains the same)
  const optionItems = document.querySelectorAll(".option-item");
  optionItems.forEach((item) => {
    item.addEventListener("click", function () {
      optionItems.forEach((opt) => (opt.style.backgroundColor = ""));
      this.style.backgroundColor = "#3B82F6"; // Highlight selected
    });
  });


  // Delivery Day Styling (Needs to be called after rendering days)
  function addDeliveryDayEventListeners() {
     const deliveryButtons = document.querySelectorAll(".delivery-day");
      deliveryButtons.forEach((button) => {
        button.addEventListener("click", () => {
          deliveryButtons.forEach((btn) => {
            btn.classList.remove("bg-primary", "text-white", "border-0");
            btn.classList.add("bg-transparent", "border", "border-dark-subtle");
          });

          button.classList.remove("bg-transparent", "border-dark-subtle");
          button.classList.add("bg-primary", "text-white", "border-0");
        });
      });
  }

    // Quantity Buttons Event Listeners (Attached after rendering products)
    function addQuantityControlListeners() {
        const plusBtn = productListEl.querySelector('.plusBtn');
        const minusBtn = productListEl.querySelector('.minusBtn');
        const quantitySpan = productListEl.querySelector('.product-quantity');

        if (!plusBtn || !minusBtn || !quantitySpan) return; // Exit if elements not found

        plusBtn.addEventListener("click", () => {
            let currentQuantity = parseInt(quantitySpan.textContent, 10);
            currentQuantity++;
            quantitySpan.textContent = currentQuantity;
            updatePrices();
        });

        minusBtn.addEventListener("click", () => {
             let currentQuantity = parseInt(quantitySpan.textContent, 10);
            if (currentQuantity > 1) { // Prevent quantity from going below 1
                currentQuantity--;
                quantitySpan.textContent = currentQuantity;
                updatePrices();
            }
        });
    }


  // --- Initial Data Fetch and Rendering ---

  async function initializePage() {
    // Initially disable buttons and set prices to 0
    disableOrderControls(); // This will target buttons if they exist after rendering
    updatePrices(); // Sets prices to 0 initially
    deliveryDaysCardEl.style.display = 'none'; // Hide delivery section initially
    noProductMessageEl.style.display = 'block'; // Show no product message initially
     loadingDeliveryDaysEl.style.display = 'block'; // Show loading for delivery days initially


    try {
      // Fetch Products
      products = await fetchProducts();
      renderProducts(products); // This will render products, set unitPrice, initial quantity, and add listeners

      if (products && products.length > 0) {
        // If products exist, fetch discount and delivery days
        try {
            const discountData = await fetchDiscount();
            discountPerItem = discountData.discountPerItem || 0;
        } catch (discountError) {
             console.error("Could not fetch discount, using default 0:", discountError);
             discountPerItem = 0; // Default to 0 if discount fetch fails
        }

        try {
            const deliveryDays = await fetchDeliveryDays();
            renderDeliveryDays(deliveryDays);
             loadingDeliveryDaysEl.style.display = 'none'; // Hide loading after fetching days
        } catch (deliveryError) {
             console.error("Could not fetch delivery days:", deliveryError);
             renderDeliveryDays([]); // Render empty state for delivery days
             loadingDeliveryDaysEl.style.display = 'none'; // Hide loading even on error
        }


        // Show delivery days section if products are available
        deliveryDaysCardEl.style.display = 'block';
        noProductMessageEl.style.display = 'none';
         updatePrices(); // Update prices again after fetching discount


      } else {
        // If no products
        discountPerItem = 0;
        deliveryDaysCardEl.style.display = 'none'; // Hide delivery section
        noProductMessageEl.style.display = 'block'; // Show no product message
        loadingDeliveryDaysEl.style.display = 'none'; // Hide loading for delivery days
         deliveryDaysContainerEl.innerHTML = ""; // Clear delivery days content
         updatePrices(); // Ensure prices are 0
      }

    } catch (error) {
      console.error("Critical error during page initialization:", error);
      // Handle critical errors (e.g., product fetch failed)
      productListEl.innerHTML = "<div class='text-center py-5 text-danger'>خطا در بارگذاری محصولات. لطفا مجددا تلاش کنید.</div>";
      loadingProductsEl.style.display = "none";
      loadingDeliveryDaysEl.style.display = "none";
      deliveryDaysCardEl.style.display = 'none'; // Hide delivery section on error
      noProductMessageEl.style.display = 'block'; // Show no product message on error
       disableOrderControls();
       discountPerItem = 0;
       unitPrice = 0;
       // currentQuantity implicitly 0
       updatePrices(); // Ensure prices are 0
    }
  }

  initializePage(); // Call the function to start the process on page load
});
