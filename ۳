document.addEventListener("DOMContentLoaded", () => {
  const productListEl = document.getElementById("product-list");
  const loadingProductsEl = document.getElementById("loading-products");
  const orderTotalPriceEl = document.getElementById("order-total-price");
  const orderDiscountEl = document.getElementById("order-discount");
  const orderFinalPriceEl = document.getElementById("order-final-price");
  const deliveryDaysCardEl = document.getElementById("delivery-days-card");
  const deliveryDaysContainerEl = document.getElementById("delivery-days-container");
   const loadingDeliveryDaysEl = document.getElementById("loading-delivery-days");
  const noProductMessageEl = document.getElementById("no-product-message");
  const payButton = document.getElementById("pay-button");
  const productCardBody = document.querySelector('.col-md-9 .card-body'); // No longer needed for header

  let productsData = []; // Store the initial product data from API
  let discountPerItem = 0;

  // --- Simulated API Calls ---
  async function fetchProducts() {
    return new Promise(resolve => {
      setTimeout(() => {
        const data = [
          {
            id: 1,
            name: "اسپرسو ساز فیلیپس اتوماتیک سایکو",
            description: "گارانتی اصالت و سلامت فیزیکی کالا",
            price: 17800000,
            image: "./images/و-قیمت-اسپرسو-ساز-فیلیپس-اتوماتیک-سایکو-مدل-Saeco-SM878500-Xelsico-Deluxe-3.webp" // Corrected image name based on original HTML
          }
           ,
            {
              id: 2,
              name: "محصول نمونه دیگر",
              description: "توضیحات محصول دوم",
              price: 5000000,
              image: "https://via.placeholder.com/100" // Placeholder image
            }

        ];
        // const data = []; // Uncomment to simulate no products
        resolve(data);
      }, 500);
    });
  }

  async function fetchDiscount() {
    return new Promise(resolve => {
      setTimeout(() => {
        const data = { discountPerItem: 280000 }; // Discount is per item (product type)
        resolve(data);
      }, 300);
    });
  }

  async function fetchDeliveryDays() {
    return new Promise(resolve => {
      setTimeout(() => {
        const data = [
          { dayOfWeek: "شنبه", date: "۷ بهمن" },
          { dayOfWeek: "یکشنبه", date: "۸ بهمن" },
          { dayOfWeek: "دوشنبه", date: "۹ بهمن" }
        ];
        // const data = []; // Uncomment to simulate no delivery days
        resolve(data);
      }, 400);
    });
  }

  // --- Rendering Functions ---

  function renderProducts(productsToRender) {
    // Clear the header and product list
    const existingHeader = productCardBody.querySelector('.table-container > .d-flex.justify-content-between.border-bottom');
    if(existingHeader) existingHeader.remove(); // Remove old header if exists

    productListEl.innerHTML = ""; // Clear current content

    loadingProductsEl.style.display = "none";

    if (productsToRender && productsToRender.length > 0) {
      productsToRender.forEach(product => {
        const productHtml = `
          <div class="product-item card mb-3" data-product-id="${product.id}">
            <div class="card-body d-flex align-items-center justify-content-between">
              <div class="d-flex align-items-center">
                 <img src="${product.image}" alt="تصویر محصول" width="100" height="100" class="me-3">
                 <div>
                    <div class="title fw-bold">${product.name}</div>
                    <div class="description text-muted small">${product.description}</div>
                 </div>
              </div>
              <div class="d-flex flex-column align-items-end ms-3">
                <span class="product-price fw-bold">${new Intl.NumberFormat("fa-IR").format(product.price)} تومان</span>
                 <div class="d-flex align-items-center mt-2 product-quantity-controls">
                  <button class="bg-transparent border border-danger-subtle rounded-circle px-2 minusBtn">-</button>
                  <div class="d-inline mx-1"><span class="product-quantity">1</span></div> مورد
                  <button class="bg-transparent border border-danger-subtle rounded-circle px-2 plusBtn">+</button>
                </div>
              </div>
              <button type="button" class="btn-close ms-3 remove-product-btn" aria-label="حذف محصول" data-product-id="${product.id}"></button>
            </div>
          </div>
        `;
        productListEl.innerHTML += productHtml; // Append each product
      });

       // Add event listeners after rendering all products
       addQuantityControlListeners();
       addCloseButtonListeners();
       enableOrderControls(); // Enable buttons now that products are rendered
    } else {
      productListEl.innerHTML = "<div class='text-center py-5'>محصولی برای نمایش وجود ندارد.</div>";
      disableOrderControls(); // No products, disable controls
    }
     updatePrices(); // Update totals based on rendered products
  }


  function renderDeliveryDays(daysToRender) {
     deliveryDaysContainerEl.innerHTML = "";
     loadingDeliveryDaysEl.style.display = "none";

    if (daysToRender && daysToRender.length > 0) {
      const daysHtml = daysToRender.map(day => `
        <button class="delivery-day my-2 bg-transparent border border-dark-subtle rounded-2 p-3">
          ${day.dayOfWeek} <br> ${day.date}
        </button>
      `).join('');
      deliveryDaysContainerEl.innerHTML = daysHtml;
       addDeliveryDayEventListeners();
    } else {
      deliveryDaysContainerEl.innerHTML = "<div class='text-center py-3'>روز تحویلی در دسترس نیست.</div>";
    }
  }

  // --- Update Order Details and Payment ---

  function updatePrices() {
      const productItems = productListEl.querySelectorAll('.product-item'); // Get all product items currently in DOM
      let totalItemsCount = 0;
      let calculatedTotalPrice = 0;
      let calculatedTotalDiscount = 0;

      productItems.forEach(item => {
          const quantitySpan = item.querySelector('.product-quantity');
          const priceSpan = item.querySelector('.product-price');

          if(quantitySpan && priceSpan) {
              const quantity = parseInt(quantitySpan.textContent, 10);
               // Remove " تومان" and commas before parsing price
              const priceText = priceSpan.textContent.replace(' تومان', '').replace(/,/g, '');
              const price = parseInt(priceText, 10);

              if (!isNaN(quantity) && !isNaN(price)) {
                  totalItemsCount += quantity;
                  calculatedTotalPrice += price * quantity;
                  calculatedTotalDiscount += discountPerItem * quantity;
              }
          }
      });


    // orderQuantityEl is removed, not updating a total count in order summary list
    orderTotalPriceEl.textContent = new Intl.NumberFormat("fa-IR").format(calculatedTotalPrice) + " تومان";
    orderDiscountEl.textContent = new Intl.NumberFormat("fa-IR").format(calculatedTotalDiscount) + " تومان";
    const finalPrice = calculatedTotalPrice - calculatedTotalDiscount;
    orderFinalPriceEl.textContent = new Intl.NumberFormat("fa-IR").format(finalPrice);

    // Disable pay button if no product items remain in the list
    if (productItems.length === 0 || calculatedTotalPrice === 0) {
      payButton.classList.add('disabled');
      payButton.style.pointerEvents = 'none';
         // Trigger the "no product" state if all items removed
         handleNoProductState();
    } else {
       payButton.classList.remove('disabled');
       payButton.style.pointerEvents = 'auto';
        // Ensure "no product" state is hidden if items exist
        noProductMessageEl.style.display = 'none';
        deliveryDaysCardEl.style.display = 'block'; // Assuming delivery days were fetched already or will be handled elsewhere
    }
  }

   // --- Control Button States ---
   // These functions are now less relevant as buttons are per item, but keep for consistency
  function enableOrderControls() {
     // Find all plus/minus buttons and enable them
     const plusBtns = productListEl.querySelectorAll('.plusBtn');
     const minusBtns = productListEl.querySelectorAll('.minusBtn');
     plusBtns.forEach(btn => btn.disabled = false);
     minusBtns.forEach(btn => btn.disabled = false);
  }

  function disableOrderControls() {
       // Find all plus/minus buttons and disable them
     const plusBtns = productListEl.querySelectorAll('.plusBtn');
     const minusBtns = productListEl.querySelectorAll('.minusBtn');
     plusBtns.forEach(btn => btn.disabled = true);
     minusBtns.forEach(btn => btn.disabled = true);
  }

  // --- Handle No Product State ---
  function handleNoProductState() {
      discountPerItem = 0; // Reset discount if no products
      deliveryDaysCardEl.style.display = 'none';
      noProductMessageEl.style.display = 'block';
      loadingDeliveryDaysEl.style.display = 'none';
      deliveryDaysContainerEl.innerHTML = "";
      updatePrices(); // Ensure prices are 0
      disableOrderControls(); // Disable any potential controls (though they shouldn't exist)
  }


  // --- Event Listeners ---

   const optionItems = document.querySelectorAll(".option-item");
  optionItems.forEach((item) => {
    item.addEventListener("click", function () {
      optionItems.forEach((opt) => (opt.style.backgroundColor = ""));
      this.style.backgroundColor = "#3B82F6";
    });
  });


  function addDeliveryDayEventListeners() {
     const deliveryButtons = document.querySelectorAll(".delivery-day");
      deliveryButtons.forEach((button) => {
        button.addEventListener("click", () => {
          deliveryButtons.forEach((btn) => {
            btn.classList.remove("bg-primary", "text-white", "border-0");
            btn.classList.add("bg-transparent", "border", "border-dark-subtle");
          });

          button.classList.remove("bg-transparent", "border-dark-subtle");
          button.classList.add("bg-primary", "text-white", "border-0");
        });
      });
  }

    // Quantity Buttons Event Listeners (Attached after rendering products)
    function addQuantityControlListeners() {
        // Find all plus/minus buttons in the product list
        const plusBtns = productListEl.querySelectorAll('.plusBtn');
        const minusBtns = productListEl.querySelectorAll('.minusBtn');

        plusBtns.forEach(button => {
             // Remove existing listeners to prevent duplicates if renderProducts is called again
            const oldListener = button.dataset.listener;
            if(oldListener) button.removeEventListener('click', window[oldListener]);

            const newListener = (event) => {
                const quantitySpan = event.target.parentElement.querySelector('.product-quantity');
                 if (!quantitySpan) return; // Safety check
                let currentQuantity = parseInt(quantitySpan.textContent, 10);
                currentQuantity++;
                quantitySpan.textContent = currentQuantity;
                updatePrices();
            };
            button.addEventListener("click", newListener);
            button.dataset.listener = 'plus' + button.dataset.productId; // Store a unique listener name (requires product ID)
        });

         minusBtns.forEach(button => {
            // Remove existing listeners
             const oldListener = button.dataset.listener;
            if(oldListener) button.removeEventListener('click', window[oldListener]);

            const newListener = (event) => {
                 const quantitySpan = event.target.parentElement.querySelector('.product-quantity');
                 if (!quantitySpan) return; // Safety check
                 let currentQuantity = parseInt(quantitySpan.textContent, 10);
                if (currentQuantity > 1) {
                    currentQuantity--;
                    quantitySpan.textContent = currentQuantity;
                    updatePrices();
                }
            };
            button.addEventListener("click", newListener);
             button.dataset.listener = 'minus' + button.dataset.productId; // Store unique listener name (requires product ID)
        });
    }

    // Close Button Event Listeners (Attached after rendering products)
    function addCloseButtonListeners() {
        const removeButtons = productListEl.querySelectorAll('.remove-product-btn');

        removeButtons.forEach(button => {
             // Remove existing listeners
             const oldListener = button.dataset.listener;
            if(oldListener) button.removeEventListener('click', window[oldListener]);

            const newListener = (event) => {
                const productIdToRemove = event.target.dataset.productId;
                const productItemEl = productListEl.querySelector(`.product-item[data-product-id="${productIdToRemove}"]`);

                if(productItemEl) {
                    productItemEl.remove(); // Remove the product element from the DOM
                    updatePrices(); // Recalculate totals
                    // Check if the list is now empty
                    if(productListEl.querySelectorAll('.product-item').length === 0) {
                        handleNoProductState(); // Trigger no product state
                    }
                }
            };
            button.addEventListener("click", newListener);
             button.dataset.listener = 'remove' + button.dataset.productId; // Store unique listener name (requires product ID)
        });
    }


  // --- Initial Data Fetch and Rendering ---

  async function initializePage() {
    disableOrderControls();
    updatePrices(); // Sets prices to 0 initially
    deliveryDaysCardEl.style.display = 'none';
    noProductMessageEl.style.display = 'block';
     loadingDeliveryDaysEl.style.display = 'block';
     // Clear any static header that might be in the HTML
     const staticHeader = productCardBody.querySelector('.table-container > .d-flex.justify-content-between.border-bottom');
     if(staticHeader) staticHeader.remove();


    try {
      productsData = await fetchProducts(); // Store fetched data globally if needed elsewhere

      if (productsData && productsData.length > 0) {
        renderProducts(productsData); // Render products with quantity controls and close buttons

        try {
            const discountData = await fetchDiscount();
            discountPerItem = discountData.discountPerItem || 0;
        } catch (discountError) {
             console.error("Could not fetch discount, using default 0:", discountError);
             discountPerItem = 0;
        }

        try {
            const deliveryDays = await fetchDeliveryDays();
            renderDeliveryDays(deliveryDays);
             loadingDeliveryDaysEl.style.display = 'none';
        } catch (deliveryError) {
             console.error("Could not fetch delivery days:", deliveryError);
             renderDeliveryDays([]);
             loadingDeliveryDaysEl.style.display = 'none';
        }

        // Only show delivery days and hide no product message if products were initially loaded
        deliveryDaysCardEl.style.display = 'block';
        noProductMessageEl.style.display = 'none';
         updatePrices(); // Update prices after fetching discount and initial render


      } else {
        // If no products initially fetched
        handleNoProductState(); // Trigger no product state
        productListEl.innerHTML = "<div class='text-center py-5'>محصولی برای نمایش وجود ندارد.</div>"; // Show message in product area
      }

    } catch (error) {
      console.error("Critical error during page initialization:", error);
       // Handle critical errors (e.g., product fetch failed)
      const existingHeader = productCardBody.querySelector('.table-container > .d-flex.justify-content-between.border-bottom');
        if(existingHeader) existingHeader.remove();
      productListEl.innerHTML = "<div class='text-center py-5 text-danger'>خطا در بارگذاری محصولات. لطفا مجددا تلاش کنید.</div>";
      loadingProductsEl.style.display = "none";
       handleNoProductState(); // Trigger no product state on error
    }
  }

  initializePage();
});
