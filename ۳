document.addEventListener("DOMContentLoaded", () => {
  const tableBody = document.querySelector(".table-body");
  const quantitySpan = document.getElementById("quantity");
  const totalPriceSpan = document.getElementById("totalPrice");
  const discountSpan = document.getElementById("discount");
  const finalPriceSpan = document.getElementById("finalPrice");
  const deliveryDaysContainer = document.querySelector(".card-body > div"); // Select the div within card-body
  const plusBtn = document.getElementById("plusBtn");
  const minusBtn = document.getElementById("minusBtn");
  const deliveryDaysSection = deliveryDaysContainer.closest('.card'); // Get the parent card for the delivery days section

  let product = null;
  let quantity = 1;

  // Format price to Persian format with toman
  const formatPrice = (price) => {
    if (typeof price !== 'number') {
        price = parseFloat(price) || 0; // Ensure price is a number, default to 0 if invalid
    }
    return price.toLocaleString("fa-IR") + " تومان";
  };

  // Update order details and final price
  const updateOrderDetails = () => {
    if (!product) {
      quantitySpan.textContent = "0";
      totalPriceSpan.textContent = "0 تومان";
      discountSpan.textContent = "0 تومان";
      finalPriceSpan.textContent = "0";
      return;
    }
    quantitySpan.textContent = quantity;
    const totalPrice = product.price * quantity;
    const discountAmount = product.discount || 0; // Use 0 if discount is not provided
    const finalPrice = totalPrice - discountAmount;

    totalPriceSpan.textContent = formatPrice(totalPrice);
    discountSpan.textContent = "-" + formatPrice(discountAmount);
    finalPriceSpan.textContent = finalPrice.toLocaleString("fa-IR"); // No "تومان" for final price based on HTML
  };

  // Fetch products from API
  const fetchProducts = async () => {
    try {
      // Replace with actual API endpoint
      // Example fetch (replace with your actual API call):
      // const response = await fetch("/api/products");
      // const products = await response.json();

      // Mock API response for demonstration
      const products = [
        {
          id: 1,
          title: "اسپرسو ساز فیلیپس اتوماتیک سایکو",
          description: "گارانتی اصالت و سلامت فیزیکی کالا",
          price: 17800000,
          discount: 280000, // Example discount
          image: "./images/و-قیمت-اسپرسو-ساز-فیلیپس-اتوماتیک-سایکو-مدل-Saeco-SM878500-Xelsis-Deluxe-3.webp",
        },
        // Add more products if needed
      ];


      if (!products || products.length === 0) {
        tableBody.innerHTML = ""; // Empty table body if no products
        product = null;
        updateOrderDetails();
        // Also update delivery days section if no product is selected
        // Although the requirement links the delivery days fallback to its own API,
        // showing "هنوز محصولی انتخاب نشده است" makes sense if there are no products to deliver
        deliveryDaysContainer.innerHTML = "<p>هنوز محصولی انتخاب نشده است</p>";
        return;
      }

      // For simplicity, assume the first product is used
      product = products[0];
      tableBody.innerHTML = `
          <div class="table-row">
            <div class="table-cell mt-3">
              <div class="d-flex justify-content-between align-items-center product-item">
                <div class="d-flex align-items-center flex-wrap">
                  <img src="${
                    product.image
                  }" alt="تصویر محصول" width="150" height="150">
                  <div class="me-4">
                    <div class="title">${product.title}</div>
                    <div class="description">${product.description}</div>
                  </div>
                </div>
                <span>${formatPrice(product.price)}</span>
              </div>
            </div>
          </div>
        `;
      updateOrderDetails();
      // Fetch delivery days only after product is successfully loaded
      fetchDeliveryDays();

    } catch (error) {
      console.error("Error fetching products:", error);
      tableBody.innerHTML = ""; // Empty table body on error
      product = null;
      updateOrderDetails();
      // Ensure delivery days also show fallback on product fetch error
      deliveryDaysContainer.innerHTML = "<p>هنوز محصولی انتخاب نشده است</p>";
    }
  };

  // Fetch delivery days from API
  const fetchDeliveryDays = async () => {
    try {
      // Replace with actual API endpoint
      // Example fetch (replace with your actual API call):
      // const response = await fetch("/api/delivery-days");
      // const deliveryDays = await response.json();

      // Mock API response for demonstration
      const deliveryDays = [
        { day: "شنبه", date: "۷ بهمن" },
        { day: "یکشنبه", date: "۸ بهمن" },
        { day: "دوشنبه", date: "۹ بهمن" },
      ];


      if (!deliveryDays || deliveryDays.length === 0) {
        // Remove existing content and add the fallback message
        deliveryDaysContainer.innerHTML = "<p>هنوز محصولی انتخاب نشده است</p>";
        return;
      }

      // Clear previous content before adding new buttons
      deliveryDaysContainer.innerHTML = "";

      deliveryDays.forEach((day, index) => {
          const button = document.createElement('button');
          button.classList.add('delivery-day', 'my-2', 'bg-transparent', 'border', 'border-dark-subtle', 'rounded-2', 'p-3');
          if (index === 1) { // Add margin to the second button as in original HTML
              button.classList.add('mx-2');
          }
          button.innerHTML = `${day.day} <br> ${day.date}`;
          deliveryDaysContainer.appendChild(button);
      });

    } catch (error) {
      console.error("Error fetching delivery days:", error);
      // Remove existing content and add the fallback message on error
      deliveryDaysContainer.innerHTML = "<p>هنوز محصولی انتخاب نشده است</p>";
    }
  };


  // Quantity button event listeners
  plusBtn.addEventListener("click", () => {
    if (product) { // Only increase quantity if a product is selected
      quantity++;
      updateOrderDetails();
    }
  });

  minusBtn.addEventListener("click", () => {
    if (product && quantity > 1) { // Only decrease quantity if a product is selected and quantity > 1
      quantity--;
      updateOrderDetails();
    }
  });

  // Initialize the page by fetching products first
  fetchProducts();
  // fetchDeliveryDays is called after a product is successfully loaded in fetchProducts

});
